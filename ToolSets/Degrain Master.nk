set cut_paste_input [stack 0]
version 14.0 v5
BackdropNode {
inputs 0
name BackdropNode12
tile_color 0x270236ff
label "<center><img src=\"Grain.png\"> Regrain"
note_font Verdana
note_font_size 50
note_font_color 0xffffffff
selected true
xpos 244
ypos -2529
bdwidth 1388
bdheight 978
}
BackdropNode {
inputs 0
name input_and_degrain_backdrop1
tile_color 0x27023601
label "<center><img src=\"denoise.png\"> Degrain"
note_font_size 50
note_font_color 0xffffffff
selected true
xpos 637
ypos -4367
bdwidth 668
bdheight 1356
}
BackdropNode {
inputs 0
name BackdropNode13
tile_color 0x444444ff
label <center>EXR
note_font "Helvetica Bold"
note_font_size 24
note_font_color 0xffffffff
selected true
xpos 870
ypos -1964
bdwidth 233
bdheight 168
z_order 1
}
BackdropNode {
inputs 0
name BackdropNode15
tile_color 0x444444ff
label <center>ProRES
note_font "Helvetica Bold"
note_font_size 24
note_font_color 0xffffffff
selected true
xpos 528
ypos -1965
bdwidth 233
bdheight 168
z_order 1
}
Read {
inputs 0
file_type exr
file ./Footage/reg_1000_base/4448x3096/reg_1000_base.%08d.exr
format "4448 3096 0 0 4448 3096 1 TL"
first 86400
last 86542
frame_mode "start at"
frame 1
origfirst 86400
origlast 86542
origset true
version 1
colorspace Log3G12
name Read1
selected true
xpos 951
ypos -4151
}
Dot {
name Dot28
label " ADD READ NODE HERE"
note_font "Verdana Bold Italic"
note_font_size 15
note_font_color 0xe9ff55ff
selected true
xpos 985
ypos -4017
}
NoOp {
name Anchor_30b4e1
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.anchorOnCreate()\n    except:\n        pass"
knobChanged stamps.anchorKnobChanged()
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0xffffff01
note_font_size 20
selected true
xpos 951
ypos -3961
addUserKnob {20 anchor_tab l "Anchor Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_ORIGINAL
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_ORIGINAL}
addUserKnob {26 prev_name l "" +STARTLINE +HIDDEN T Anchor_30b4e1}
addUserKnob {3 showing l "" +STARTLINE +HIDDEN}
addUserKnob {1 tags l Tags t "Comma-separated tags you can define for each Anchor, that will help you find it when invoking the Stamp Selector by pressing the Stamps shortkey with nothing selected."}
tags 2D,
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 createStamp l new t "Create a new Stamp for this Anchor." -STARTLINE T stamps.stampCreateWired(nuke.thisNode())}
addUserKnob {22 selectStamps l select t "Reconnect all of this Anchor's Stamps." -STARTLINE T stamps.wiredSelectSimilar(nuke.thisNode().name())}
addUserKnob {22 reconnectStamps l reconnect -STARTLINE T stamps.anchorReconnectWired()}
addUserKnob {22 zoomNext l "zoom next" t "Navigate to this Anchor's next Stamp on the Node Graph." -STARTLINE T stamps.wiredZoomNext(nuke.thisNode().name())}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
set N8b8afa00 [stack 0]
PostageStamp {
name Stamp17
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
knobChanged "import stamps; stamps.wiredKnobChanged()"
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0x1000001
note_font Verdana
note_font_size 20
selected true
xpos 951
ypos -3905
hide_input true
addUserKnob {20 wired_tab l "Wired Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_ORIGINAL
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_ORIGINAL}
addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T "<i><center><img src=\"Read.png\"> Input</i>"}
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
addUserKnob {26 anchor_label l Anchor: T " "}
addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
addUserKnob {1 anchor l Anchor}
anchor Anchor_30b4e1
addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
StickyNote {
inputs 0
name StickyNote3
tile_color 0x555555ff
label "Adjust your noise profile\nAnd set your write path."
note_font Gotham-Book
note_font_size 20
note_font_color 0xffffffff
selected true
xpos 1066
ypos -3752
}
push $N8b8afa00
PostageStamp {
name Stamp18
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
knobChanged "import stamps; stamps.wiredKnobChanged()"
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0x1000001
note_font Verdana
note_font_size 20
selected true
xpos 718
ypos -3065
hide_input true
addUserKnob {20 wired_tab l "Wired Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_ORIGINAL
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_ORIGINAL}
addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T "<i><center><img src=\"Read.png\"> Input</i>"}
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
addUserKnob {26 anchor_label l Anchor: T " "}
addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
addUserKnob {1 anchor l Anchor}
anchor Anchor_30b4e1
addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
push $N8b8afa00
Dot {
name Dot31
selected true
xpos 985
ypos -3832
}
set N5ea04400 [stack 0]
Dot {
name Dot32
selected true
xpos 718
ypos -3832
}
Dot {
name Dot33
selected true
xpos 718
ypos -3176
}
Read {
inputs 0
file_type exr
file "\[value write_degrain.file]"
format "4448 3096 0 0 4448 3096 1 TL_4K"
first {{root.first_frame}}
last {{root.last_frame}}
origfirst {{root.first_frame}}
origlast {{root.last_frame}}
origset true
version 2
colorspace sRGB
name read_degrain
selected true
xpos 951
ypos -3462
addUserKnob {20 User}
addUserKnob {26 names l "Create shuffle nodes from all layers"}
addUserKnob {22 setShuffle l "Create Shuffle nodes" -STARTLINE T "\{newNode()\}"}
addUserKnob {22 selLayer l "Select your Layers" -STARTLINE T "\{mylayerPanel()\}"}
}
NoOp {
name Anchor_1d492c1
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.anchorOnCreate()\n    except:\n        pass"
knobChanged stamps.anchorKnobChanged()
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0xffffff01
note_font_size 20
selected true
xpos 951
ypos -3372
addUserKnob {20 anchor_tab l "Anchor Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_DEGRAINED
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_DEGRAINED}
addUserKnob {26 prev_name l "" +STARTLINE +HIDDEN T Anchor_1d492c1}
addUserKnob {3 showing l "" +STARTLINE +HIDDEN}
addUserKnob {1 tags l Tags t "Comma-separated tags you can define for each Anchor, that will help you find it when invoking the Stamp Selector by pressing the Stamps shortkey with nothing selected."}
tags "2D, File Out,"
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 createStamp l new t "Create a new Stamp for this Anchor." -STARTLINE T stamps.stampCreateWired(nuke.thisNode())}
addUserKnob {22 selectStamps l select t "Reconnect all of this Anchor's Stamps." -STARTLINE T stamps.wiredSelectSimilar(nuke.thisNode().name())}
addUserKnob {22 reconnectStamps l reconnect -STARTLINE T stamps.anchorReconnectWired()}
addUserKnob {22 zoomNext l "zoom next" t "Navigate to this Anchor's next Stamp on the Node Graph." -STARTLINE T stamps.wiredZoomNext(nuke.thisNode().name())}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
set Nadd15400 [stack 0]
Dot {
name Dot34
label " PUT COLOR TRANSFORMS HERE"
note_font "Verdana Bold Italic"
note_font_size 15
note_font_color 0xe9ff55ff
selected true
xpos 985
ypos -3297
}
NoOp {
name Anchor_29aea6441d1
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.anchorOnCreate()\n    except:\n        pass"
knobChanged stamps.anchorKnobChanged()
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0xffffff01
note_font_size 20
selected true
xpos 951
ypos -3229
addUserKnob {20 anchor_tab l "Anchor Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_COLORED
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_COLORED}
addUserKnob {26 prev_name l "" +STARTLINE +HIDDEN T Anchor_29aea6441d1}
addUserKnob {3 showing l "" +STARTLINE +HIDDEN}
addUserKnob {1 tags l Tags t "Comma-separated tags you can define for each Anchor, that will help you find it when invoking the Stamp Selector by pressing the Stamps shortkey with nothing selected."}
tags 2D,
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 createStamp l new t "Create a new Stamp for this Anchor." -STARTLINE T stamps.stampCreateWired(nuke.thisNode())}
addUserKnob {22 selectStamps l select t "Reconnect all of this Anchor's Stamps." -STARTLINE T stamps.wiredSelectSimilar(nuke.thisNode().name())}
addUserKnob {22 reconnectStamps l reconnect -STARTLINE T stamps.anchorReconnectWired()}
addUserKnob {22 zoomNext l "zoom next" t "Navigate to this Anchor's next Stamp on the Node Graph." -STARTLINE T stamps.wiredZoomNext(nuke.thisNode().name())}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
set Nadd1d200 [stack 0]
Merge2 {
inputs 2
operation minus
name Merge18
selected true
xpos 951
ypos -3179
}
NoOp {
name Anchor_1af1
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.anchorOnCreate()\n    except:\n        pass"
knobChanged stamps.anchorKnobChanged()
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0xffffff01
note_font_size 20
selected true
xpos 951
ypos -3119
addUserKnob {20 anchor_tab l "Anchor Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title GRAIN
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T GRAIN}
addUserKnob {26 prev_name l "" +STARTLINE +HIDDEN T Anchor_1af1}
addUserKnob {3 showing l "" +STARTLINE +HIDDEN}
addUserKnob {1 tags l Tags t "Comma-separated tags you can define for each Anchor, that will help you find it when invoking the Stamp Selector by pressing the Stamps shortkey with nothing selected."}
tags 2D,
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 createStamp l new t "Create a new Stamp for this Anchor." -STARTLINE T stamps.stampCreateWired(nuke.thisNode())}
addUserKnob {22 selectStamps l select t "Reconnect all of this Anchor's Stamps." -STARTLINE T stamps.wiredSelectSimilar(nuke.thisNode().name())}
addUserKnob {22 reconnectStamps l reconnect -STARTLINE T stamps.anchorReconnectWired()}
addUserKnob {22 zoomNext l "zoom next" t "Navigate to this Anchor's next Stamp on the Node Graph." -STARTLINE T stamps.wiredZoomNext(nuke.thisNode().name())}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
PostageStamp {
name Stamp19
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
knobChanged "import stamps; stamps.wiredKnobChanged()"
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0x1000001
note_font Verdana
note_font_size 20
selected true
xpos 1160
ypos -3121
hide_input true
addUserKnob {20 wired_tab l "Wired Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title GRAIN
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T GRAIN}
addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T "<i><center><img src=\"Grain.png\"> Grain,<center><img src=\"Read.png\"> Input</i>"}
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
addUserKnob {26 anchor_label l Anchor: T " "}
addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
addUserKnob {1 anchor l Anchor}
anchor Anchor_1af1
addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
push $Nadd15400
PostageStamp {
name Stamp20
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
knobChanged "import stamps; stamps.wiredKnobChanged()"
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0x1000001
note_font Verdana
note_font_size 20
selected true
xpos 1163
ypos -3067
hide_input true
addUserKnob {20 wired_tab l "Wired Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_DEGRAINED
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_DEGRAINED}
addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T "<i>2D, File Out</i>"}
addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
addUserKnob {26 anchor_label l Anchor: T " "}
addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
addUserKnob {1 anchor l Anchor}
anchor Anchor_1d492c1
addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
StickyNote {
inputs 0
name StickyNote5
tile_color 0xbbbbbbff
label "\[file dirname \[value root.name]]/RENDERS/\[lindex \[split \[basename \[value root.name]] .] 0]/\[lindex \[split \[basename \[value root.name]] .] 0].%04d.exr"
note_font "Helvetica Bold Italic"
note_font_size 20
selected true
xpos 298
ypos -1615
}
StickyNote {
inputs 0
name StickyNote6
tile_color 0xbbbbbbff
label "\[file dirname \[value root.name]]/RENDERS/\[lindex \[split \[basename \[value root.name]] .] 0].mov"
note_font "Helvetica Bold Italic"
note_font_size 20
selected true
xpos 297
ypos -1665
}
push $N5ea04400
Denoise2 {
profileCurve {profile {curve 0 x0.125 0 0 0 0 0 0 0 0}}
serializeKnob "0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00 0.000000000e+00 0.000000000e+00 0.000000000e+00 0.000000000e+00 0.000000000e+00 0.000000000e+00 
18446744073709551615"
name Denoise2
selected true
xpos 800
ypos -3736
}
push $N5ea04400
OFXcom.absoft.neatvideo5_v5 {
DNP 
ProfileName "Unspecified device (4448x3096p).dnp"
NFP NTBkAPotAAAAAAAAAAABAAAAAACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAAAAAAIA/AACAPwAAgD/NzMw+zcxMP83MTD8BAAAAAADAPwAAwD8AAIA/AACAPwAAgD8AAAAAAAAAP5qZmT4AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAQAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAgAAAAAAgD8AAAAAAAAAAAAAwD8AAAAAAAAAAAAAgD8BAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAAAAAAAAAAAQD8AAIA/AACAPwAAgD8BAQEBAQEBAQAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAIA/AACAPwAAgw
PresetName default
ParamsHash1 -2068962344
ParamsHash2 260
ParamsHash3 0
name "Reduce Noise v5_2"
selected true
xpos 951
ypos -3735
}
Switch {
inputs 2
name Which_Denoise1
selected true
xpos 951
ypos -3662
}
set N5a819800 [stack 0]
Text2 {
font_size_toolbar 64
font_width_toolbar 100
font_height_toolbar 100
message "\[file dirname \[value \[topnode].file]]_dn/\[lindex \[split \[file dirname \[value \[topnode].file]] /] end]_dn.%04d.exr"
old_message {{47 86 111 108 117 109 101 115 47 68 101 116 116 105 102 111 115 115 47 67 111 109 112 97 110 121 51 47 82 101 103 105 111 110 115 47 50 48 50 51 48 56 49 52 47 70 111 111 116 97 103 101 47 114 101 103 95 49 48 48 48 95 98 97 115 101 47 52 52 52 56 120 51 48 57 54 95 100 110 47 52 52 52 56 120 51 48 57 54 95 100 110 46 37 48 52 100 46 101 120 114}
  }
old_expression_markers {{0 75 80 88}
  }
box {0 3031 3911 3096}
transforms {{0 2}
  }
font_size_values {{0 64 1 64 2 64 3 64 4 64 5 64 6 64 7 64 8 64 9 64 10 64 11 64 12 64 13 64 14 64 15 64 16 64 17 64 18 64 19 64 20 64 21 64 22 64 23 64 24 64 25 64 26 64 27 64 28 64 29 64 30 64 31 64 32 64 33 64 34 64 35 64 36 64 37 64 38 64 39 64 40 64 41 64 42 64 43 64 44 64 45 64 46 64 47 64 48 64 49 64 50 64 51 64 52 64 53 64 54 64 55 64 56 64 57 64 58 64 59 64 60 64 61 64 62 64 63 64 64 64 65 64 66 64 67 64 68 64 69 64 70 64 71 64 72 64 73 64 74 64 75 64 76 64 77 64 78 64 79 64 80 64 81 64 82 64 83 64 84 64 85 64 86 64 87 64 88 64 89 64 90 64 91 64 92 64 93 64 94 64 95 64 96 64 97 64 98 64 99 64 100 64 0 99 1 99 2 99 3 99 4 99 5 99 6 99 7 99 8 99 9 99 10 99 11 99 12 99 13 99 14 99 15 99 16 99 17 99 18 99 19 99 20 99 21 99 22 99 23 99 24 99 25 99 26 99 27 99 28 99 29 99 30 99 31 99 32 99 33 99 34 99 35 99 36 99 37 99 38 99 39 99 40 99 41 99 42 99 43 99 44 99 45 99 46 99 47 99 48 99 49 99 50 99 51 99 52 99 53 99 54 99 55 99 56 99 57 99 58 99 59 99 60 99 61 99 62 99 63 99 64 99 65 99 66 99 67 99 68 99 69 99 70 99 71 99 72 99 73 99 74 99 75 99 76 99 77 99 78 99 79 99 80 99 81 99 82 99 83 99 84 99 85 99 86 99 87 99 88 99 89 99 90 99 91 99 92 99 93 99 94 99 95 99 96 99 97 99 98 99 99 99 100 99}
  }
font {{ Gotham : Black : Gotham-Black.otf : 0 }}
font_size 64
center {2224 1548}
cursor_initialised true
initial_cursor_position {{0 3096}
  }
group_animations {{0} imported: 0 selected: items: "root transform/"}
animation_layers {{1 11 2224 1548 0 0 1 1 0 0 0 0}
  }
color {0 0 0 1}
color_panelDropped true
name Filename
note_font Gotham-Book
selected true
xpos 1106
ypos -3662
}
StickyNote {
inputs 0
name StickyNote4
tile_color 0xdfff00ff
label "\[value Filename.message]"
note_font "Helvetica Bold Italic"
note_font_size 10
selected true
xpos 727
ypos -3517
}
push $N5a819800
Write {
channels rgba
file "\[file dirname \[value \[topnode].file]]_dn/\[lindex \[split \[file dirname \[value \[topnode].file]] /] end]_dn.%04d.exr"
colorspace sRGB
file_type exr
autocrop true
compression "PIZ Wavelet (32 scanlines)"
first_part rgba
create_directories true
checkHashOnRead false
version 2
name write_degrain
selected true
xpos 951
ypos -3619
postage_stamp true
}
StickyNote {
inputs 0
name StickyNote2
tile_color 0xdfff00ff
label "Make sure you analyze in the\nDasGrain Node"
note_font "Helvetica Bold Italic"
note_font_size 20
selected true
xpos 864
ypos -2162
}
StickyNote {
inputs 0
name StickyNote7
tile_color 0xdfff00ff
label "SET YOUR COLOR SPACE"
note_font "Helvetica Bold Italic"
note_font_size 20
selected true
xpos 692
ypos -1838
}
push $N8b8afa00
PostageStamp {
name Stamp24
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
knobChanged "import stamps; stamps.wiredKnobChanged()"
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0x1000001
note_font Verdana
note_font_size 20
selected true
xpos 773
ypos -2394
hide_input true
addUserKnob {20 wired_tab l "Wired Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_ORIGINAL
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_ORIGINAL}
addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T "<i><center><img src=\"denoise.png\"> Degrain</i>"}
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
addUserKnob {26 anchor_label l Anchor: T " "}
addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
addUserKnob {1 anchor l Anchor}
anchor Anchor_30b4e1
addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
set N8c1dd200 [stack 0]
Dot {
name Dot16
selected true
xpos 814
ypos -2067
}
push $Nadd15400
PostageStamp {
name Stamp25
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
knobChanged "import stamps; stamps.wiredKnobChanged()"
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0x1000001
note_font Verdana
note_font_size 20
selected true
xpos 592
ypos -2394
hide_input true
addUserKnob {20 wired_tab l "Wired Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_DEGRAINED
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_DEGRAINED}
addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T "<i>2D, File Out</i>"}
addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T "<i><center><img src=\"denoise.png\"> Degrain</i>"}
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
addUserKnob {26 anchor_label l Anchor: T " "}
addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
addUserKnob {1 anchor l Anchor}
anchor Anchor_1d492c1
addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
push $N8c1dd200
push $Nadd1d200
PostageStamp {
name Stamp21
help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
knobChanged "import stamps; stamps.wiredKnobChanged()"
autolabel "nuke.thisNode().knob(\"title\").value()"
tile_color 0x1000001
note_font Verdana
note_font_size 20
selected true
xpos 951
ypos -3064
hide_input true
addUserKnob {20 wired_tab l "Wired Stamp"}
addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
title PLATE_COLORED
addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T PLATE_COLORED}
addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T "<i><center><img src=\"denoise.png\"> Degrain</i>"}
addUserKnob {26 line1 l "" +STARTLINE}
addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
addUserKnob {26 anchor_label l Anchor: T " "}
addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
addUserKnob {26 stamps_label l Stamps: T " "}
addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
addUserKnob {26 space_1 l "" +STARTLINE T " "}
addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
addUserKnob {26 space_2 l "" +STARTLINE T " "}
addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
addUserKnob {1 anchor l Anchor}
anchor Anchor_29aea6441d1
addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
addUserKnob {26 line2 l "" +STARTLINE}
addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
Dot {
name Dot17
label " TO COMP"
note_font "Verdana Bold Italic"
note_font_size 15
note_font_color 0xe9ff55ff
selected true
xpos 985
ypos -2445
}
Crop {
box {{format.x} {format.y} {width} {height}}
name Crop1
note_font Gotham-Book
selected true
xpos 951
ypos -2409
}
Dot {
name Dot18
label " INVERT COLOR TRANSFORMS HERE"
note_font "Verdana Bold Italic"
note_font_size 15
note_font_color 0xe9ff55ff
selected true
xpos 985
ypos -2338
}
Group {
inputs 3
name DasGrain2
help "DasGrain makes regraining as simple as clicking a few buttons.\n\nFollow the steps in the Help tab and you'll have a perfect regrain in no time!"
onCreate "import random\n\ntestimonials = \[\n    \"Such an elegant solution, love it!\",\n    \"Your gizmo is beyond expectation\",\n    \"Totally awesome!\",\n    \"DasGrain is officially the best thing ever\",\n    \"It's really working!\",\n    \"Das bringt Tr&auml;nen in meine Augen\",\n    \"DasGrain is the salvation we waited for\",\n    \"I save a lot of time, and definitely my nerves :)\",\n    \"It's alright\",\n    \"My new favourite node, thanks!<br>Having said that, ...\"\n    ]\n\nnode = nuke.thisNode()\nnode\['testimonial'].setValue('<br><br><br><i>&laquo;%s&raquo;</i><br>&mdash; anonymous<br><br>' % random.choice(testimonials))\nnode\['box'].setFlag(nuke.NO_ANIMATION)"
knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() == 'box':\n    this_frame = nuke.frame()\n    n\['sample_frame'].setValue(this_frame)\n\nif k.name() == 'scatter':\n    n\['divider04'].setVisible(k.value() == False)\n    n\['divider05'].setVisible(k.value() == True)"
tile_color 0x7f7f7fff
selected true
xpos 951
ypos -2211
addUserKnob {20 DasGrain_tab l DasGrain}
addUserKnob {41 output t "<strong>regrained comp</strong> it is what it sais\n<strong>plate grain</strong> plate minus degrained plate\n<strong>normalised grain</strong> check if the normalization worked. It should be as even as possible. This is what you want to output if you want to prerender a grain plate. Later you can plug it into the <i>external grain</i> input of another DasGrain\n<strong>adapted grain</strong> check if the adaptation worked. Output this if you want to further manipulate the grain (who knows what the sup is gonna come up with...). After, simply plus it to your comp (at that point the comp has to be in the <i>camera</i> colorspace, as set in the <i>Analyze</i> tab).\n<strong>grain QC</strong> check if voronoi seams are visible (&#8594; edgeblend), or the scattered grain looks different to the original plate grain (&#8594; maybe bad sample area or wrong luminance degrain amount)" T Output.output}
addUserKnob {4 meta l "metadata from" t "Chances are you want to use the metadata from the plate, but who am I to assume :)" M {COMP PLATE}}
addUserKnob {26 spacer01_1 l " " T " "}
addUserKnob {20 GrainGroupBegin l "" +STARTLINE n -2}
addUserKnob {20 Analyze_tab l Analyze}
addUserKnob {26 text l <strong>Colorspace}
addUserKnob {41 project_colorspace l project t "set this to the project color space" T OCIOColorSpace1.in_colorspace}
addUserKnob {22 python_button l "What's this all about?" -STARTLINE T "nuke.message(\"Regraining in other color spaces than the camera native linear space can lead to unexpected behaviour.\\n\\nFor example converting Alexa plates to ACEScg might introduce negative values due to ACEScg's smaller gamut. In that case converting back to ARRI Linear ALEXA Wide Gamut will probably help.\\nJust set <i>project</i> to ACEScg and <i>camera</i> to ARRI Linear ALEXA Wide Gamut.\\n\\nThis might be transferable to other cameras, but I've only tested with Alexas.\\n---------\\nBypass by setting both knobs to the same value.\")"}
addUserKnob {41 camera_colorspace l camera t "set this to the camera native linear space" T OCIOColorSpace1.out_colorspace}
addUserKnob {26 text_2 l " " T " "}
addUserKnob {26 level l "<strong>Degrain amount"}
addUserKnob {78 luminance t "Leave this at 1 if you're working on a completely degrained plate.\n\nIn case you decided to leave some luminance grain in the degrained plate (use the DegrainHelper node for this!), set this to the same value as in the DegrainHelper in order to compensate.\n\nIf the luminance degrain amount was set to 0.8, this needs to be set to 0.8 as well.\n\nYou need to select a mask of all elements that cover the plate, otherwise the grain of whole comp will be too strong " n 1}
luminance 1
addUserKnob {26 divider01 l " "}
addUserKnob {41 degrain_amount_mask l "degrain amount mask" t "Use this channel from the mask input to specify in what area of the comp the missing luminance grain needs to be compensated." T Multiply1.maskChannelMask}
addUserKnob {41 invert_mask l invert -STARTLINE T Multiply1.invert_mask}
addUserKnob {26 spacer02 l " " T " "}
addUserKnob {26 divider02 l <strong>Analyze}
addUserKnob {3 number_of_frames l "number of frames" t "Set the number of sample frames to be spread across the input range.\n\nMore frames lead to higher accuracy.\n\nIf there are particularly bright or dark frames, set them manually in the knob below to make sure they are part of the analysis.\n\nIf you want to set all sample frames manually, set this to 0 and add the frames in the knob below."}
number_of_frames 10
addUserKnob {1 additional_frames l "additional frames" t "Set additional frames like this:\n\n1001,1020,1053 (single frames)\n1020-1040 (frame ranges)\n1020-1040x4 (frame ranges with step)"}
addUserKnob {3 sample_count l "sample count" t "The samples are spread across the sample range (which gets calculated automatically) based on the AlexaV3LogC curve. This results in more samples in the dark areas and less samples in the brights.\n\nMore samples lead to a more detailed response curve (while the accuracy is limited by the quality of the degrain)."}
sample_count 20
addUserKnob {22 analyze l Analyze t "this is where the magic happens" T "import base64\nthis = nuke.thisNode()\n\n\ndef _sample_count(this):\n    \"\"\"returns the sample count\"\"\"\n\n    sample_count = int(this\['sample_count'].value())\n\n    if sample_count <= 0:\n        raise RuntimeError('Enter a sample count greater than 0')\n\n    else:\n        return sample_count\n\n\ndef _generate_frame_list(this):\n    \"\"\"converts the frames submitted by the user into a list\"\"\"\n\n    frame_list = \[]\n    number_of_frames = int(this\['number_of_frames'].value())\n    additional_frames = this\['additional_frames'].value()\n\n    if number_of_frames < 1 and additional_frames is '':\n        raise RuntimeError('Either set the number of frames > 0\\nor define additional frames')\n\n    first_frame = max(this.input(1).firstFrame(), this.input(2).firstFrame())\n    last_frame = min(this.input(1).lastFrame(), this.input(2).lastFrame())\n\n    if number_of_frames > 0:\n        distance = (last_frame - first_frame) / (number_of_frames)\n        frame = first_frame + distance / 2\n\n        for x in range(number_of_frames):\n            int_frame = int(round(frame))\n            if int_frame not in frame_list:\n                frame_list.append(int_frame)\n\n            frame += distance\n\n    frange = nuke.FrameRanges(additional_frames.split(','))\n\n    for r in frange:\n        for f in r:\n            if f >= first_frame and f <= last_frame:\n                if f not in frame_list:\n                    frame_list.append(f)\n\n    frame_list.sort()\n\n    return frame_list\n\n\ndef _setup_for_multiframe(frame_list):\n    \"\"\" arranges all sample frames next to each other, starting at frame 0\n    and sets the frame number knob of the FrameBlend node\"\"\"\n\n    time_warp = nuke.toNode('TimeWarp1')\n    time_warp\['lookup'].clearAnimated()\n    time_warp\['lookup'].setAnimated()\n    anim_list = \[]\n\n    for n, frame in enumerate(frame_list):\n        anim_list.append(nuke.AnimationKey(n, frame))\n\n    anim = time_warp\['lookup'].animation(0)\n    anim.addKey(anim_list)\n\n    frame_blend = nuke.toNode('FrameBlend1')\n    frame_blend\['endframe'].setValue(len(frame_list)-1)\n\n\ndef _generate_sample_list(sample_count, sample_range, sample_radius):\n    \"\"\"generate a list of sample values spread equally between the\n    min and max values of the sample range\"\"\"\n\n    sample_list = \[]\n\n    for item in range(0, sample_count):\n        sample_list.append(float(item) / sample_count * (sample_range\[1] - sample_range\[0]) + sample_range\[0] + sample_radius)\n\n    return sample_list\n\n\ndef _get_sample_range(channel, channel_list, frame_list):\n    \"\"\" samples the minimum and maximum values of the given frame range and\n    sets the sample range to those values\"\"\"\n\n    curve_tool = nuke.toNode('CurveTool_Range')\n    min_knob = curve_tool\['minlumapixvalue']\n    max_knob = curve_tool\['maxlumapixvalue']\n\n    min_knob.setAnimated()\n    max_knob.setAnimated()\n\n    curve_tool\['channels'].setValue(channel)\n\n    nuke.execute(curve_tool, nuke.FrameRanges(frame_list))\n\n    index = channel_list.index(channel)\n    min_list = \[key.y for key in min_knob.animation(index).keys()]\n    max_list = \[key.y for key in max_knob.animation(index).keys()]\n\n    min_value = min(min_list)\n    max_value = max(max_list)\n\n    min_knob.clearAnimated()\n    max_knob.clearAnimated()\n    curve_tool\['minlumapixdata'].clearAnimated()\n    curve_tool\['maxlumapixdata'].clearAnimated()\n\n    return \[min_value, max_value]\n\n\ndef _sample_it(keyer, curve_tool, sample, sample_radius):\n    \"\"\"analyze the grain level per channel and sample value in the sample range\"\"\"\n\n    keyer\['temp_expr0'].setValue(str(sample - sample_radius))\n    keyer\['temp_expr1'].setValue(str(sample + sample_radius))\n\n    intensity_knob = curve_tool\['intensitydata']\n    intensity_knob.clearAnimated()\n    intensity_knob.setAnimated()\n\n    nuke.execute(curve_tool, nuke.frame(), nuke.frame())\n    sample_values = intensity_knob.value()\n    intensity_knob.clearAnimated()\n\n    return sample_values\n\n\ndef check_inputs(this):\n    if this.input(1) is None:\n        raise RuntimeError('no plate connected')\n\n    if this.input(2) is None:\n        raise RuntimeError('no degrained plate connected')\n\n    def format_tuple(node):\n        return node.format().width(), node.format().height(), node.format().pixelAspect()\n\n    if format_tuple(this.input(1)) != format_tuple(this.input(2)):\n        raise RuntimeError(\"Format missmatch: Make sure the formats of plate and degrained plate match.\")\n\n\ndef start(this):\n    \"\"\"let's do this!\"\"\"\n\n    check_inputs(this)\n\n    with this:\n        frame_list = _generate_frame_list(this)\n        _setup_for_multiframe(frame_list)\n        sample_count = _sample_count(this)\n\n        blank = base64.b64decode('cmVkIHtjdXJ2ZX0KZ3JlZW4ge2N1cnZlfQpibHVlIHtjdXJ2ZX0=').decode('ascii')\n\n        lut = nuke.toNode('Sampler1')\['lut']\n        lut.fromScript(blank)\n\n        channel_list = \['red', 'green', 'blue']\n\n        keyer = nuke.toNode('Expression2')\n        copy = nuke.toNode('Copy2')\n\n        curve_tool = nuke.toNode('CurveTool')\n        pixel = curve_tool\['ROI'].value()\[2] * curve_tool\['ROI'].value()\[3]\n\n        task = nuke.ProgressTask('Analysing...')\n        step = 100.0 / 3 / sample_count\n        progress = step\n\n        time_warp = nuke.toNode('TimeWarp1')\n        frame_blend = nuke.toNode('FrameBlend1')\n\n        time_warp\['disable'].setValue(False)\n        frame_blend\['disable'].setValue(False)\n\n        for channel in channel_list:\n            task.setMessage('\{\} range'.format(channel))\n\n            copy\['from0'].setValue('rgba.\{\}'.format(channel))\n\n            sample_range = _get_sample_range(channel, channel_list, frame_list)\n            sample_radius = (sample_range\[1] - sample_range\[0]) / sample_count / 2\n            sample_list = _generate_sample_list(sample_count, sample_range, sample_radius)\n\n            for sample in sample_list:\n                if task.isCancelled():\n                    return\n\n                task.setProgress(int(progress))\n\n                sample_values = _sample_it(keyer, curve_tool, sample, sample_radius)\n\n                task.setMessage('\{\} channel at \{\}'.format(channel, round(sample, 2)))\n\n                if sample_values\[3] * pixel >= 10:\n                    lut.setValueAt(sample_values\[0] / sample_values\[3], sample_values\[1] / sample_values\[3], channel_list.index(channel))\n\n                progress += step\n\n        time_warp\['lookup'].clearAnimated()\n        time_warp\['disable'].setValue(True)  # hopefully prevents slowing down the comp\n        frame_blend\['disable'].setValue(True)  # hopefully prevents slowing down the comp\n\n    del task\n\n\nstart(this)\n" +STARTLINE}
addUserKnob {26 divider03 l " "}
addUserKnob {41 analysis_mask l "analysis mask" t "Use this channel from the mask input to control what area of the plate will be analyzed.\n\nUsefull if the degrain is obviously bad in some areas." T ChannelMerge1.A}
addUserKnob {6 invert_1 l invert -STARTLINE}
addUserKnob {20 Adjust_tab l Adjust}
addUserKnob {22 whatsthis l "What am I looking at?" T "nuke.message(\"After the analysis you'll see the sampled grain response curves here. On the x-axis is the brightness of the image and on the y-axis the grain intensity. Grain increases with brightness, so <strong>the slope of the curves should always be positive</strong> (they should always go up &#8599;).<br><br>The quality of the curves depends entirely on the quality of the degrain. If the curves look wrong (for example they go up and down), try to improve the degrain first. If they still look wrong and the resulting regrain doesn't work well enough, you can try to improve the curves here by deleting/correcting all points that don't follow an upwards trend.<br><br>You can also extend the curves (again: with an upwards trend) if the comp has values that don't exist in the plate.<br><br>Note: The curve is used for both the normalization as well as the adaptation of the grain, so it doesn't give direct control of the grain intensity.\")" +STARTLINE}
addUserKnob {41 lut l "" +STARTLINE T Sampler1.lut}
addUserKnob {20 Replace_tab l Replace}
addUserKnob {6 external_grain l "use external grain" t "Use external grain from a second DasGrain, with the output set to 'normalised grain', to replace masked area.\nConnect it to the 'external grain' input of this DasGrain (it's a bit hidden on the left side of the node)." +STARTLINE}
addUserKnob {26 divider04 l <strong>Scatter}
addUserKnob {26 divider05 l <strong>Scatter +HIDDEN T "<span style=\"color:red\">Make sure you're sampling an area without any plate detail.</a>"}
addUserKnob {6 scatter l activate t "Activates the scatter function. It generates a new grain based on the plate grain in the sample box using a Voronoi noise." +STARTLINE}
addUserKnob {41 useGPUIfAvailable l "Use GPU if available" -STARTLINE T VoronoiScatter.useGPUIfAvailable}
addUserKnob {15 box l "sample box" t "Define an area that is used as a source for the scatter function. The plate grain in this area should be as even as possible, without any visible detail."}
box {100 100 500 300}
addUserKnob {3 sample_frame l "sample frame" t "The frame at which the grain is being sampled. Is set automatically once the sample box is changed." +DISABLED}
sample_frame 1
addUserKnob {4 stereo l "stereo behaviour" t "randomize offset per view: same voronoy pattern for all views, but different offset\n\nrandomize pattern per view: different voronoy pattern for every view" M {none "randomize offset per view" "randomize pattern per view" ""}}
addUserKnob {26 spacer06 l "" +STARTLINE T " "}
addUserKnob {6 overlay l "overlay cell pattern" t "Overlay the cell pattern of the voronoy noise. Useful to check where the seams are and if distortion or blending is necessary." +STARTLINE}
addUserKnob {7 cell_size l "cell size" t "Cell size of the scatter. Shoudn't be too small, as lower grain frequencies might break.\nCan't be too big either, to prevent it from breaking the border of the samplebox (will error if it does)." R 5 100}
cell_size 40
addUserKnob {26 spacer07 l "" +STARTLINE T " "}
addUserKnob {20 concealer l "edge concealer" n 1}
concealer 0
addUserKnob {26 concealer_help l " " T "If you can see the voronoi pattern in the grain QC output,\nincrease the edge blend size."}
addUserKnob {3 edge_blend_size l "edge blend size" t "Set the output to grain QC. If you see the cell seams, increase the edge blend size to conceal them.\n\nThis is a bit hacky and slow."}
addUserKnob {26 tip l "" -STARTLINE T "sloooow - keep this below 3 if possible"}
addUserKnob {26 distortion_help l " " T "\nDistortion might help as well, if somehow the straight\nseams are visible (you might want to toggle the overlay\nwhile adjusting)."}
addUserKnob {7 amplitude R 0 50}
addUserKnob {7 frequency R 0 50}
frequency 15
addUserKnob {20 endGroup n -1}
addUserKnob {26 divider06 l "" +STARTLINE}
addUserKnob {41 replace_mask l "replace mask" t "Use this channel from the mask input to specify where you want to use scattered grain instead of the adapted plate grain." -STARTLINE T Merge9.maskChannelMask}
addUserKnob {41 invert_mask_1 l invert -STARTLINE T Merge9.invert_mask}
addUserKnob {20 GrainGroupEnd l "" +STARTLINE n -3}
addUserKnob {20 Help_tab l Help}
addUserKnob {26 basic_setup l "" +STARTLINE T "<font size=\"5\">Basic setup</font>"}
addUserKnob {26 ""}
addUserKnob {26 explanation l "" +STARTLINE T "<strong>Bold</strong> steps are always necessary"}
addUserKnob {26 steps l "" +STARTLINE T "<br><strong>1. This should be the only regrain node in your comp.<br>2. Connect <i>plate</i>, <i>degrained plate</i> and <i>comp</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;The comp should be done on the degrained plate!</strong><br>3. Set the <i>luminance degrain amount</i>.<br><strong>4. Press the <i>Analyze</i> button.</strong><br>5. Correct the response curves in the <i>Adjust</i> tab.<br>6. Move the <i>sample box</i> to an area without any plate detail and activate <i>scatter</i>.<br>7. If necessary, activate <i>edge blend</i> and/or <i>distortion</i> to conceal seams."}
addUserKnob {26 in_depth l "" +STARTLINE T "<br>For an in depth explanation of the steps, read the tooltips and check out this video:<br><a href=\"https://vimeo.com/284820390/\"><span style=\"color:#C8C8C8;\">https://vimeo.com/284820390</a>"}
addUserKnob {26 pushthebutton l "" +STARTLINE T "<br><br>If the result is not as expected and you don't know why, push this button:"}
addUserKnob {22 troubleshoot l Troubleshoot t HEEEEEEELP T "import base64\n\nmessages = \[]\n\nthis = nuke.thisNode()\n\n#########################\n\nif this.input(0) is None or this.input(1) is None or this.input(2) is None:\n    messages.append(\"<font color='red'><strong>ERROR</strong></font> Plate, degrained plate and comp need to be connected to the appropriate inputs.\")\n\n#########################\n\nelse:\n\n    def format_to_tuple(g):\n        \"\"\"returns (1024, 786, 2.0)\n        \"\"\"\n        return (g.format().width(), g.format().height(), g.format().pixelAspect())\n\n    format_set = set(\[\n        format_to_tuple(this.input(0)),\n        format_to_tuple(this.input(1)),\n        format_to_tuple(this.input(2)),\n        ])\n    if len(format_set) != 1:\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> Format missmatch: Make sure formats of plate, degrained plate and comp match.\")\n\n    if (this.input(1).firstFrame() != this.input(2).firstFrame()) or (this.input(1).lastFrame() != this.input(2).lastFrame()):\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> The frame ranges of plate and degrained plate don't match. Double check that they belong together.\")\n\n#########################\n\nmessages.append(\"Double check that plate and degrained plate haven't been modified in any way (paint, despill, etc).\")\n\n#########################\n\nif this\['luminance'].getValue() == 1:\n    messages.append(\"Are you working on a completely degrained plate? If not, you might have to set the luminance degrain amount.\")\n\n#########################\n\nblank = base64.b64decode('cmVkIHtjdXJ2ZX0KZ3JlZW4ge2N1cnZlfQpibHVlIHtjdXJ2ZX0=').decode('ascii')\n\nwith this:\n    Sampler = nuke.toNode('Sampler1')     \n    if Sampler\['lut'].toScript() == blank:\n        messages.append(\"<font color='red'><strong>ERROR</strong></font> You haven't pressed the Analyze button yet!\")\n\n#########################\n\nclass BadThings(Exception): pass\n\ndef thingy():\n    with this:\n        Sampler = nuke.toNode('Sampler1')\n        list = this\['lut'].toScript().replace('\}','').split('\\n')\n        for item in list:\n            sample_value = 0\n            for value in item.split(' '):\n                try:\n                    value == float(value)\n                    if value < sample_value:\n                        raise BadThings(\"<font color='orange'><strong>WARNING</strong></font> Check and fix the response curves. Their slopes should always be positive (the curves should always go up &#8599;).\")\n                        \n                    else:\n                        sample_value = value\n                except ValueError:\n                    # Ignore non-numeric things like x-values of \"x5.46\" and channel names like \"red\{\" etc\n                    pass\ntry:\n    thingy()\nexcept BadThings as e:\n    messages.append(str(e))\n    \n#########################\n\nif this\['scatter'].value() == True:\n    if this\['box'].getValue() == \[100.0, 100.0, 500.0, 300.0]:\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> Scatter has been activated, but the sample box is still in its default position. Are you sure that's a good area to sample?\")\n\n#########################\n\nmessages.append(\"Did you copy/paste DasGrain from another script? Make sure to reanalyze and to reset the sample area if you are using scatter.\")\n\n#########################\n\nif len(messages) > 0:\n    nuke.message(\"<font size=\\\"5\\\">Things worth checking</font><br><br>\"\n                               \"%s<br><br><br>If any of this doesn't make sense to you, it might be worth checking out the video on vimeo.\" % (\n                                  \"<hr>\".join(\"%s: %s\" % (i+1, m) for i, m in enumerate(messages))))\n" +STARTLINE}
addUserKnob {26 dont_despair l "" +STARTLINE T "<br>If it still doesn't work and you're about to flip the table, send me a <a href=\"mailto:holtzf+nuke@gmail.com?subject=Help with DasGrain v1.7.8\"><span style=\"color:#C8C8C8;\">mail</a>.<br>I'm happy to help! :)"}
addUserKnob {20 Info_tab l Info}
addUserKnob {26 dasname l "" +STARTLINE T "<font size='5'>DasGrain</font> v1.8<br>"}
addUserKnob {26 text_1 l "" +STARTLINE T "DasGrain makes regraining as simple as clicking a few buttons.<br>Follow the steps in the <i>Help</i> tab and you'll have a perfect\nregrain<br>in no time!"}
addUserKnob {26 ""}
addUserKnob {26 info l "" +STARTLINE T "Last change: 2021-03-07\n\n"}
addUserKnob {26 name_1 l "" +STARTLINE T "Fabian Holtz"}
addUserKnob {26 mail l "" +STARTLINE T "<a href=\"mailto:holtzf+nuke@gmail.com?subject=Help with DasGrain v1.7.8\"><span style=\"color:#C8C8C8;\">holtzf+nuke@gmail.com</a>"}
addUserKnob {26 testimonial l "" +STARTLINE T "<br><br><br><i>&laquo;Such an elegant solution, love it!&raquo;</i><br>&mdash; anonymous<br><br>"}
addUserKnob {26 ""}
addUserKnob {26 credit l "" +STARTLINE T "<br>VoronoiScatter based on <a href=\"http://www.nukepedia.com/blink/image/voronoi/\"><span style=\"color:#C8C8C8;\">Ivan Busquets' implementation</a> of<br> libNoise's\nVoronoi generator"}
addUserKnob {26 thanks l "" +STARTLINE T "<br>Special thanks to Ben Dickson for bearing with my questions and<br>problems and RSP comp for the valuable feedback."}
}
BackdropNode {
inputs 0
name BackdropNode1
tile_color 0x7f7f7fff
label "normalise grain"
note_font_size 30
xpos 170
ypos 1662
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode11
tile_color 0x7f7f7fff
label "add grain"
note_font_size 30
xpos 830
ypos 2766
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode13
tile_color 0x7f7f7fff
label scatter
note_font_size 30
xpos -50
ypos 2022
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode14
tile_color 0x7f7f7fff
label "analyze grain"
note_font_size 30
xpos -159
ypos 606
bdwidth 319
bdheight 877
}
BackdropNode {
inputs 0
name BackdropNode2
tile_color 0x7f7f7fff
label "grain response curve"
note_font_size 30
xpos 610
ypos 2574
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode3
tile_color 0x7f7f7fff
label QC
note_font_size 30
xpos 1050
ypos 3222
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode4
tile_color 0x7f7f7fff
label "grain response curve"
note_font_size 30
xpos 610
ypos 1422
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode5
tile_color 0x7f7f7fff
label "adapt grain"
note_font_size 30
xpos 170
ypos 2574
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode6
tile_color 0x7f7f7fff
label "sample range"
note_font_size 30
xpos -490
ypos 606
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode7
tile_color 0x7f7f7fff
label "luminance level"
note_font_size 30
xpos 280
ypos -282
bdwidth 760
bdheight 685
}
BackdropNode {
inputs 0
name BackdropNode8
tile_color 0x7f7f7fff
label "plate grain"
note_font_size 30
xpos 170
ypos 606
bdwidth 320
bdheight 110
}
BackdropNode {
inputs 0
name BackdropNode9
tile_color 0x7f7f7fff
label replace
note_font_size 30
xpos 60
ypos 2191
bdwidth 540
bdheight 226
}
Input {
inputs 0
name DEGRAINED_PLATE
label "\[value number]"
note_font_size 30
xpos 730
ypos -896
number 2
}
OCIOColorSpace {
in_colorspace {{OCIOColorSpace1.in_colorspace}}
out_colorspace {{OCIOColorSpace1.out_colorspace}}
name OCIOColorSpace2
xpos 730
ypos -490
}
Dot {
name Dot9
xpos 764
ypos -390
}
set Nadd2a000 [stack 0]
Dot {
name Dot28
xpos 764
ypos -198
}
set Nadc84c00 [stack 0]
Dot {
name Dot32
xpos 764
ypos 234
}
set Nadc85000 [stack 0]
push $Nadc84c00
Dot {
name Dot27
xpos 624
ypos -198
}
Colorspace {
colorspace_out YCbCr
name Colorspace1
xpos 590
ypos -130
}
Dot {
name Dot7
xpos 624
ypos -54
}
set Naa951200 [stack 0]
Input {
inputs 0
name PLATE
label "\[value number]"
note_font_size 30
xpos 290
ypos -892
number 1
}
Dot {
name Dot50
xpos 324
ypos -726
}
set Naa952600 [stack 0]
OCIOColorSpace {
in_colorspace scene_linear
out_colorspace scene_linear
name OCIOColorSpace1
xpos 290
ypos -490
}
Dot {
name Dot29
xpos 324
ypos -198
}
set Naa952e00 [stack 0]
Dot {
name Dot6
xpos 464
ypos -198
}
Colorspace {
colorspace_out YCbCr
name Colorspace2
xpos 430
ypos -130
}
Merge2 {
inputs 2
operation from
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge4
xpos 430
ypos -58
}
Multiply {
channels rgb
value {{"1 / parent.luminance - 1"} 0 0 0}
name Multiply6
xpos 430
ypos 14
}
Dot {
name Dot31
xpos 464
ypos 90
}
push $Naa951200
Merge2 {
inputs 2
operation plus
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge5
xpos 590
ypos 86
}
Colorspace {
colorspace_in YCbCr
name Colorspace3
xpos 590
ypos 158
}
Merge2 {
inputs 2
operation from
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge6
xpos 590
ypos 230
}
Dot {
name Dot35
xpos 624
ypos 306
}
set Naa95be00 [stack 0]
push $Nadc85000
Merge2 {
inputs 2
operation from
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge7
xpos 730
ypos 302
disable {{"Multiply6.value.r == 0"}}
}
Dot {
name Dot2
xpos 764
ypos 522
}
set Naa960c00 [stack 0]
Dot {
name Dot30
xpos 764
ypos 690
}
set Naa961800 [stack 0]
Dot {
name Dot55
xpos 764
ypos 1170
}
set Naa961c00 [stack 0]
Input {
inputs 0
name mask
label "\[value number]"
note_font_size 30
xpos 1170
ypos -896
number 3
}
Dot {
name Dot39
xpos 1204
ypos 258
}
set Naa962400 [stack 0]
Dot {
name Dot26
xpos 1204
ypos 1074
}
set Naa962800 [stack 0]
Invert {
name Invert2
xpos 180
ypos 1064
disable {{!parent.invert_1}}
}
push $Naa961800
push $Naa952e00
Merge2 {
inputs 2
operation from
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge27
xpos 290
ypos 686
}
Dot {
name Dot3
xpos 324
ypos 786
}
set Naa963400 [stack 0]
Dot {
name Dot5
xpos 104
ypos 786
}
set Naa964000 [stack 0]
push $Naa964000
Copy {
inputs 2
from0 {{{parent.Copy2.from0}}}
to0 rgba.red
name Copy3
xpos 70
ypos 848
}
Expression {
expr0 abs(r)
channel1 {none none none rgba.alpha}
expr1 "r == 0"
channel2 none
channel3 none
name Expression4
xpos 70
ypos 926
}
set Naa964800 [stack 0]
push $Naa960c00
Colorspace {
colorspace_out AlexaV3LogC
name Colorspace5
xpos 70
ypos 518
}
Clamp {
maximum_enable false
name Clamp2
xpos -40
ypos 512
}
Dot {
name Dot1
xpos -116
ypos 522
}
set Naa96a400 [stack 0]
Dot {
name Dot48
xpos -116
ypos 786
}
set Naa96a800 [stack 0]
push $Naa96a800
Copy {
inputs 2
from0 rgba.blue
to0 rgba.red
name Copy2
xpos -150
ypos 848
}
Expression {
temp_name0 min
temp_expr0 0.8743099004030227
temp_name1 max
temp_expr1 0.9017339944839476
channel0 {none none none rgba.alpha}
expr0 "r >= min && r <= max"
channel1 none
channel2 none
channel3 none
name Expression2
xpos -150
ypos 926
}
Dot {
name Dot4
xpos -116
ypos 1002
}
ChannelMerge {
inputs 2
operation stencil
name ChannelMerge2
xpos -40
ypos 985
}
push $Naa964800
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy1
xpos 70
ypos 992
}
ChannelMerge {
inputs 2
A -rgba.green
operation multiply
name ChannelMerge1
xpos 70
ypos 1057
disable {{!A}}
}
Copy {
inputs 2
from0 {{{parent.Copy2.from0}}}
to0 rgba.green
name Copy4
xpos 70
ypos 1160
}
Premult {
channels {rgba.red rgba.green -rgba.blue none}
name Premult1
xpos 70
ypos 1238
}
TimeWarp {
lookup 1064
time ""
filter nearest
name TimeWarp1
xpos 70
ypos 1286
disable true
}
FrameBlend {
channels {rgba.red rgba.green -rgba.blue rgba.alpha}
startframe 0
endframe 9
userange true
name FrameBlend1
xpos 70
ypos 1352
disable true
}
CurveTool {
avgframes 0
channels {rgba.red rgba.green -rgba.blue rgba.alpha}
ROI {0 0 {width} {height}}
intensitydata {3.186990843e-10 3.904063724e-07 0 2.039674139e-08}
name CurveTool
xpos 70
ypos 1424
}
push $Naa96a400
Dot {
name Dot16
xpos -336
ypos 522
}
CurveTool {
operation "Max Luma Pixel"
channels {-rgba.red -rgba.green rgba.blue none}
ROI {0 0 {width} {height}}
maxlumapixdata {2169 1192}
maxlumapixvalue {0 0 0.9017339945}
minlumapixdata {2 1640}
minlumapixvalue {0 0 0.3887301087}
name CurveTool_Range
xpos -370
ypos 680
}
Sampler {
inputs 0
lut {red {curve x0.1486877799 0.002328472805 x0.1883584708 0.002580029184 x0.2357937545 0.002841025491 x0.3005832732 0.003209352429 x0.3910403252 0.003631945298 x0.5121644139 0.004178279301 x0.6719218493 0.00481400492 x0.875140667 0.005579168468 x1.13361764 0.006382753411 x1.437868953 0.006747750666 x1.841814995 0.007068577397 x2.383255243 0.00711935334 x3.116907358 0.006929612814 x4.067111969 0.006387417117 x5.094678879 0.006737184013 x6.353773594 0.004790683968}
  green {curve x0.1395547986 0.002309228942 x0.1782841384 0.002598454951 x0.2232088 0.002887869801 x0.2856273055 0.003303843668 x0.3737110496 0.003751647983 x0.4918141663 0.004257294024 x0.64852494 0.005045381137 x0.8450992107 0.005771900536 x1.096633196 0.006695570773 x1.385445356 0.007149748736 x1.783723116 0.007171300597 x2.355623245 0.006802471694 x3.092716217 0.006412475066 x3.920039892 0.005922033073 x4.899454594 0.007093253973}
  blue {curve x0.1534095258 0.00219754627 x0.1960807443 0.002456250161 x0.2442989051 0.002726180386 x0.3111588657 0.003097064956 x0.4030673206 0.003525542488 x0.5292328 0.004049708657 x0.6945669055 0.004769026408 x0.8957031369 0.005357978343 x1.146118879 0.00606945172 x1.447556019 0.006386254075 x1.866330028 0.006535537722 x2.457432985 0.006587335171 x3.243632555 0.004824078506 x3.938946962 0.004362896137}}
name Sampler1
onCreate "n = nuke.thisNode()\nn\['sampler'].setEnabled(False)"
knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\np = nuke.thisParent()\n\nif k.name() == 'lut':\n    with p:\n        for c in \['ColorLookup1','ColorLookup2']:\n           nuke.toNode(c)\['lut'].fromScript(k.toScript())"
xpos 840
ypos 1502
}
push $Naa952600
Dot {
name Dot51
xpos 115
ypos -726
}
Input {
inputs 0
name COMP
label "\[value number]"
note_font_size 30
xpos 950
ypos -896
}
Dot {
name Dot49
xpos 984
ypos -605
}
set Naa979a00 [stack 0]
Switch {
inputs 2
which {{parent.meta}}
name Switch1
xpos 81
ypos -609
}
Dot {
name Dot54
xpos 115
ypos -486
}
Dot {
name Dot52
xpos -685
ypos -486
}
Dot {
name Dot53
xpos -685
ypos 3762
}
push $Naa962400
Dot {
name Dot40
xpos 874
ypos 258
}
push $Naa95be00
Dot {
name Dot34
xpos 624
ypos 378
}
Multiply {
inputs 1+1
channels rgb
value 0
maskChannelMask -rgba.red
name Multiply1
xpos 840
ypos 374
}
push $Naa979a00
OCIOColorSpace {
in_colorspace {{OCIOColorSpace1.in_colorspace}}
out_colorspace {{OCIOColorSpace1.out_colorspace}}
name OCIOColorSpace3
xpos 950
ypos -490
}
Dot {
name Dot44
xpos 984
ypos -390
}
set Naa97c000 [stack 0]
Merge2 {
inputs 2
operation from
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge8
xpos 950
ypos 374
disable {{"Multiply6.value.r == 0"}}
}
Dot {
name Dot18
xpos 984
ypos 2658
}
set Naa97c800 [stack 0]
ColorLookup {
lut {master {}
  red {curve x0.1486877799 0.002328472805 x0.1883584708 0.002580029184 x0.2357937545 0.002841025491 x0.3005832732 0.003209352429 x0.3910403252 0.003631945298 x0.5121644139 0.004178279301 x0.6719218493 0.00481400492 x0.875140667 0.005579168468 x1.13361764 0.006382753411 x1.437868953 0.006747750666 x1.841814995 0.007068577397 x2.383255243 0.00711935334 x3.116907358 0.006929612814 x4.067111969 0.006387417117 x5.094678879 0.006737184013 x6.353773594 0.004790683968}
  green {curve x0.1395547986 0.002309228942 x0.1782841384 0.002598454951 x0.2232088 0.002887869801 x0.2856273055 0.003303843668 x0.3737110496 0.003751647983 x0.4918141663 0.004257294024 x0.64852494 0.005045381137 x0.8450992107 0.005771900536 x1.096633196 0.006695570773 x1.385445356 0.007149748736 x1.783723116 0.007171300597 x2.355623245 0.006802471694 x3.092716217 0.006412475066 x3.920039892 0.005922033073 x4.899454594 0.007093253973}
  blue {curve x0.1534095258 0.00219754627 x0.1960807443 0.002456250161 x0.2442989051 0.002726180386 x0.3111588657 0.003097064956 x0.4030673206 0.003525542488 x0.5292328 0.004049708657 x0.6945669055 0.004769026408 x0.8957031369 0.005357978343 x1.146118879 0.00606945172 x1.447556019 0.006386254075 x1.866330028 0.006535537722 x2.457432985 0.006587335171 x3.243632555 0.004824078506 x3.938946962 0.004362896137}
  alpha {}}
name ColorLookup2
xpos 730
ypos 2654
}
push $Naa962800
Dot {
name Dot38
xpos 1204
ypos 1842
}
Dot {
name Dot37
xpos 544
ypos 1842
}
Dot {
name Dot22
xpos 544
ypos 2271
}
set N8c1e1800 [stack 0]
Dot {
name Dot20
xpos 544
ypos 2391
}
push $N8c1e1800
Dot {
name Dot17
xpos 434
ypos 2271
}
set N8c1e2000 [stack 0]
Dot {
name Dot13
xpos 214
ypos 2271
}
Input {
inputs 0
name external_grain
label "\[value number]"
note_font_size 30
xpos -150
ypos 1716
number 4
}
Dot {
name Dot21
xpos -116
ypos 1938
}
push $Naa961c00
ColorLookup {
channels rgb
lut {master {}
  red {curve x0.1486877799 0.002328472805 x0.1883584708 0.002580029184 x0.2357937545 0.002841025491 x0.3005832732 0.003209352429 x0.3910403252 0.003631945298 x0.5121644139 0.004178279301 x0.6719218493 0.00481400492 x0.875140667 0.005579168468 x1.13361764 0.006382753411 x1.437868953 0.006747750666 x1.841814995 0.007068577397 x2.383255243 0.00711935334 x3.116907358 0.006929612814 x4.067111969 0.006387417117 x5.094678879 0.006737184013 x6.353773594 0.004790683968}
  green {curve x0.1395547986 0.002309228942 x0.1782841384 0.002598454951 x0.2232088 0.002887869801 x0.2856273055 0.003303843668 x0.3737110496 0.003751647983 x0.4918141663 0.004257294024 x0.64852494 0.005045381137 x0.8450992107 0.005771900536 x1.096633196 0.006695570773 x1.385445356 0.007149748736 x1.783723116 0.007171300597 x2.355623245 0.006802471694 x3.092716217 0.006412475066 x3.920039892 0.005922033073 x4.899454594 0.007093253973}
  blue {curve x0.1534095258 0.00219754627 x0.1960807443 0.002456250161 x0.2442989051 0.002726180386 x0.3111588657 0.003097064956 x0.4030673206 0.003525542488 x0.5292328 0.004049708657 x0.6945669055 0.004769026408 x0.8957031369 0.005357978343 x1.146118879 0.00606945172 x1.447556019 0.006386254075 x1.866330028 0.006535537722 x2.457432985 0.006587335171 x3.243632555 0.004824078506 x3.938946962 0.004362896137}
  alpha {}}
name ColorLookup1
xpos 730
ypos 1502
}
Dot {
name Dot24
xpos 764
ypos 1746
}
push $Naa963400
Dot {
name Dot33
xpos 324
ypos 1386
}
MergeExpression {
inputs 2
temp_name0 target
temp_expr0 .01
expr0 "Br * (target / Ar)"
expr1 "Bg * (target / Ag)"
expr2 "Bb * (target / Ab)"
channel3 none
name MergeExpression1
xpos 290
ypos 1742
}
Dot {
name Dot15
xpos 324
ypos 1842
}
set N8c1e7000 [stack 0]
Dot {
name Dot25
xpos 104
ypos 1842
}
Switch {
inputs 2
which {{parent.external_grain}}
name Switch2
xpos 70
ypos 1934
}
Group {
name VoronoiScatter
xpos 70
ypos 2102
disable {{!parent.scatter}}
addUserKnob {20 User}
addUserKnob {41 useGPUIfAvailable l "Use GPU if available" T VoroNoise.useGPUIfAvailable}
addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T VoroNoise.vectorize}
addUserKnob {15 box}
box {{parent.box x1004 0 x1036 -75} {parent.box x1004 100 x1036 120} {parent.box x1004 496 x1036 325} {parent.box x1004 916 x1036 320}}
addUserKnob {3 sample_frame l "sample frame"}
sample_frame {{parent.sample_frame}}
addUserKnob {7 cell_size l "cell size" R 0 100}
cell_size {{parent.cell_size}}
addUserKnob {6 overlay_pattern l "overlay pattern" -STARTLINE}
overlay_pattern {{parent.overlay}}
addUserKnob {3 edge_blend_size l "edge blend size"}
edge_blend_size {{parent.edge_blend_size}}
addUserKnob {7 amplitude R 0 100}
amplitude {{parent.amplitude}}
addUserKnob {7 frequency R 0 100}
frequency {{parent.frequency}}
addUserKnob {41 VoroNoise_Seed l Seed T VoroNoise.VoroNoise_Seed}
}
Input {
inputs 0
name Input1
xpos 180
ypos -879
}
Dot {
name Dot14
xpos 214
ypos -750
}
set N8c1e8400 [stack 0]
Dot {
name Dot16
xpos 434
ypos -750
}
Remove {
name Remove1
xpos 400
ypos -687
}
Dot {
name Dot6
xpos 434
ypos -606
}
set N8c1e9000 [stack 0]
Dot {
name Dot15
xpos 654
ypos -606
}
set N8c1e9400 [stack 0]
Dot {
name Dot7
xpos 874
ypos -606
}
Noise {
output {rgba.red -rgba.green -rgba.blue none}
replace true
size {{parent.frequency} {"parent.frequency * pixel_aspect"}}
zoffset {{"x + 1000"}}
gamma 1
name Noise1
xpos 840
ypos -514
}
Noise {
output {-rgba.red rgba.green -rgba.blue none}
replace true
size {{parent.Noise1.size} {parent.Noise1.size}}
zoffset {{x}}
gamma 1
name Noise2
xpos 840
ypos -466
}
Clamp {
name Clamp1
xpos 840
ypos -424
}
Dot {
name Dot11
xpos 874
ypos -366
}
push $N8c1e9400
BlinkScript {
ProgramGroup 1
KernelDescription "2 \"VoroNoise\" iterate pixelWise c117be128a07c11b6d82fd34148d66b3bcac41976ec9c2082affe38e890c2c0f 2 \"src\" Read Point \"dst\" Write Point 6 \"Frequency\" Float 1 AABIQg== \"Seed\" Int 1 AAAAAA== \"aspect ratio\" Float 1 AACAPw== \"width\" Int 1 AAAAAA== \"height\" Int 1 AAAAAA== \"Randomness\" Float 1 AAAAPw== 6 \"frequency\" 1 1 \"seed\" 1 1 \"aspect_ratio\" 1 1 \"width\" 1 1 \"height\" 1 1 \"randomness\" 1 1 0"
kernelSource "// Voronoi.blink\n// A test implementation of libNoise's Voronoi generator using Blink\n// Ivan Busquets - August 2013\n// Modified for DasGrain by Fabian Holtz - April 2019\n\n#define X_NOISE_GEN  1619\n#define Y_NOISE_GEN  31337\n#define Z_NOISE_GEN  6971\n#define SEED_NOISE_GEN  1013\n#define SQRT_3 1.73205081\n\ninline int IntValueNoise3D (int x, int y, int z, int seed)\n\{\n  // All constants are primes and must remain prime in order for this noise\n  // function to work correctly.\n  int n = (\n      X_NOISE_GEN    * x\n    + Y_NOISE_GEN    * y\n    + Z_NOISE_GEN    * z\n    + SEED_NOISE_GEN * seed)\n    & 0x7fffffff;\n  n = (n >> 13) ^ n;\n  return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n\}\n\ninline float ValueNoise3D (int x, int y, int z, int seed)\n\{\n  return 1.0 - ((float)IntValueNoise3D (x, y, z, seed) / 1073741824.0);\n\}\n\nkernel VoroNoise : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead> src;\n  Image<eWrite, eAccessPoint> dst;\n\nparam:\n  float frequency;\n  int seed;\n  float aspect_ratio;\n  int width;\n  int height;\n  float randomness;\n\n\n  void define() \{\n    defineParam(frequency, \"Frequency\", 50.0f);\n    defineParam(aspect_ratio, \"aspect ratio\", 1.0f);\n    defineParam(seed, \"Seed\", 0);\n    defineParam(randomness, \"Randomness\", 0.5f);\n  \}\n\n\n\n\n  void process(int2 pos) \{\n   float x = pos.x * aspect_ratio * frequency / width;\n   float y = pos.y * frequency / width;\n   int xInt = (x > 0.0) ? x : x - 1;\n   int yInt = (y > 0.0) ? y : y - 1;\n\n\n    float minDist = 2147483647.0;\n    float xCandidate = 0;\n    float yCandidate = 0;\n\n    float dist;\n\nfor (int yCur = yInt - 2; yCur <= yInt + 2; yCur++) \{\n      for (int xCur = xInt - 2; xCur <= xInt + 2; xCur++) \{\n\n        // Calculate the position and distance to the seed point inside of\n        // this unit cube. Limited by the randomness value\n        float xPos = xCur + (ValueNoise3D (xCur, yCur, 0, seed    ) + 1 ) * randomness + (1-randomness) - 1;\n        float yPos = yCur + (ValueNoise3D (xCur, yCur, 0, seed + 1) + 1 ) * randomness + (1-randomness) - 1;\n\n        float xDist = xPos - x;\n        float yDist = yPos - y;\n\n        dist = pow(xDist, 2) + pow(yDist, 2);\n        if (dist < minDist) \{\n          // This seed point is closer to any others found so far, so record\n          // this seed point.\n          minDist = dist;\n          xCandidate = xPos;\n          yCandidate = yPos;\n\t\}\n    \}\n\}\n\n    SampleType(dst) sample(0.0f);\n\n    sample.x = xCandidate / aspect_ratio / frequency;\n    sample.y = yCandidate / height * width / frequency;\n    sample.z = 0;\n\n    dst() = sample;\n\}\n\};"
rebuild ""
VoroNoise_Frequency {{"width / parent.cell_size"}}
VoroNoise_Seed {{"(x + (parent.parent.stereo == 2 ? \[lsearch \[value root.views] \[view]] / 2 : 0)) * 5"}}
"VoroNoise_aspect ratio" {{pixel_aspect}}
VoroNoise_width {{width}}
VoroNoise_height {{height}}
rebuild_finalise ""
name VoroNoise
xpos 620
ypos -520
}
Copy {
inputs 2
from0 rgba.red
to0 forward.u
from1 rgba.green
to1 forward.v
name Copy1
xpos 620
ypos -382
disable {{"parent.amplitude == 0"}}
}
IDistort {
uv forward
uv_offset 0.5
uv_scale {{parent.amplitude} {"uv_scale.w * pixel_aspect"}}
filter impulse
name IDistort1
xpos 620
ypos -280
disable {{"parent.amplitude == 0"}}
}
Dot {
name Dot5
xpos 654
ypos -246
}
NoTimeBlur {
rounding floor
name NoTimeBlur3
xpos 620
ypos -154
}
Transform {
translate {{"floor((x * size) % 1 * (size)) - int(size / 2)"} {"floor(x % 1 * (size)) - int(size/2)"}}
filter impulse
black_outside false
name Transform1
xpos 620
ypos -58
disable {{"parent.edge_blend_size < 1"}}
addUserKnob {20 User}
addUserKnob {3 size}
size {{"parent.edge_blend_size + 1"}}
}
Dot {
name Dot9
xpos 654
ypos 42
}
set Nadd31200 [stack 0]
push $N8c1e9000
Expression {
expr0 "(x + .5) / width"
expr1 "(y + .5) / height"
expr2 0
name STMapGenerator
xpos 400
ypos -514
}
NoTimeBlur {
rounding floor
name NoTimeBlur2
xpos 400
ypos -154
}
Merge2 {
inputs 2
operation from
Achannels {rgba.red rgba.green -rgba.blue none}
Bchannels {rgba.red rgba.green -rgba.blue none}
output {rgba.red rgba.green -rgba.blue none}
name Merge2
xpos 400
ypos 38
}
Dot {
name Dot10
xpos 434
ypos 210
}
push $Nadd31200
Expression {
temp_name0 view_index
temp_expr0 "parent.parent.stereo == 1 ? \[lsearch \[value root.views] \[view]] / 2 : 0"
expr0 "random((r + view_index) * 1000000, 0) * (maxx - minx) + minx"
expr1 "random((g + view_index) * 1000000, 0) * (maxy - miny) + miny"
channel2 none
channel3 none
name Expression3
xpos 620
ypos 110
addUserKnob {20 User}
addUserKnob {7 frequency R 0 100}
frequency {{parent.parent.cell_size}}
addUserKnob {7 multiplier R 0 3}
multiplier 0.5
addUserKnob {15 shrink}
shrink {{"frequency * multiplier + ceil(parent.edge_blend_size / 2) + IDistort1.uv_scale.w / 2"} {"frequency * multiplier + ceil(parent.edge_blend_size / 2) + IDistort1.uv_scale.h / 2"} {"frequency * multiplier + floor(parent.edge_blend_size / 2) + IDistort1.uv_scale.w / 2"} {"frequency * multiplier + floor(parent.edge_blend_size / 2) + IDistort1.uv_scale.h / 2"}}
addUserKnob {26 ""}
addUserKnob {7 minx}
minx {{"(parent.box.x + shrink.x + .5) / width"}}
addUserKnob {7 maxx}
maxx {{"(parent.box.r - shrink.r - .5) / width"}}
addUserKnob {7 miny}
miny {{"(parent.box.y + shrink.y + .5) / height"}}
addUserKnob {7 maxy}
maxy {{"(parent.box.t - shrink.t - .5) / height"}}
}
Merge2 {
inputs 2
operation plus
Achannels {rgba.red rgba.green -rgba.blue none}
Bchannels {rgba.red rgba.green -rgba.blue none}
output {rgba.red rgba.green -rgba.blue none}
name Merge3
xpos 620
ypos 206
}
Expression {
expr0 "(r + (maxx - minx) - minx) % (maxx - minx) + minx"
expr1 "(g + (maxy - miny) - miny) % (maxy - miny) + miny"
channel2 none
channel3 none
name Expression7
xpos 620
ypos 278
addUserKnob {20 User}
addUserKnob {7 minx}
minx {{"(parent.box.x + rint(x % 1 * parent.edge_blend_size) + .5) / width"}}
addUserKnob {7 maxx}
maxx {{"(parent.box.r + rint(x % 1 * parent.edge_blend_size) - .5) / width"}}
addUserKnob {7 miny}
miny {{"(parent.box.y + rint(x % 1 * parent.edge_blend_size) + .5) / height"}}
addUserKnob {7 maxy}
maxy {{"(parent.box.t + rint(x % 1 * parent.edge_blend_size) - .5) / height"}}
}
Dot {
name Dot3
xpos 654
ypos 354
}
set Naa981200 [stack 0]
Dot {
name Dot13
xpos 654
ypos 546
}
push $Naa981200
Dot {
name Dot8
xpos 874
ypos 354
}
Blur {
channels rgb
size {{pixel_aspect} 1}
name Blur1
label "\[value size]"
xpos 840
ypos 440
}
Difference {
inputs 2
name Difference2
xpos 840
ypos 536
}
Expression {
channel0 {none none none rgba.alpha}
expr0 "a > 1e-9"
channel1 none
channel2 none
channel3 none
name Expression2
xpos 840
ypos 614
}
Shuffle {
red alpha
green alpha
blue alpha
name Shuffle1
label "\[value in]:\[value out]"
xpos 840
ypos 680
}
Dot {
name Dot4
xpos 874
ypos 762
}
push $Naa981200
push $N8c1e8400
FrameHold {
firstFrame {{parent.sample_frame}}
name FrameHold1
xpos 180
ypos -256
}
NoTimeBlur {
rounding floor
name NoTimeBlur1
xpos 180
ypos -154
}
STMap {
inputs 2
channels rgb
uv rgb
filter impulse
name STMap1
xpos 180
ypos 350
}
set Nadd32400 [stack 0]
TimeBlur {
divisions {{"max(Transform1.size == 1 ? 2 : pow2(Transform1.size), 1)"}}
shutter 1
shuttercustomoffset {{"1 / divisions / 2"}}
name TimeBlur1
xpos 180
ypos 446
disable {{"parent.edge_blend_size < 1"}}
}
set N8a965a00 [stack 0]
push $Nadd32400
Dot {
name Dot1
xpos -6
ypos 354
}
Difference {
inputs 2
name Difference1
xpos -40
ypos 440
}
Expression {
channel0 {none none none rgba.alpha}
expr0 "a > 1e-10"
channel1 none
channel2 none
channel3 none
name Expression1
xpos -40
ypos 494
}
Blur {
channels alpha
size {{parent.parent.edge_blend_size}}
name Blur2
xpos -40
ypos 536
}
Grade {
channels alpha
blackpoint 0.5
white_clamp true
name Grade2
xpos -40
ypos 584
}
Dot {
name Dot2
xpos -6
ypos 666
}
push $N8a965a00
Grade {
inputs 1+1
white 1.4
black_clamp false
name Grade1
xpos 180
ypos 662
disable {{"parent.edge_blend_size < 1"}}
}
Merge2 {
inputs 2
Achannels rgb
Bchannels rgb
output rgb
name Merge1
xpos 180
ypos 758
disable {{!parent.overlay_pattern}}
}
Assert {
expression {{"Expression3.maxx > Expression3.minx && Expression3.maxy > Expression3.miny"}}
message "increase sample box size or decrease cell size"
name error
xpos 180
ypos 854
}
Output {
name Output1
xpos 180
ypos 950
}
end_group
Multiply {
inputs 1+1
channels rgb
value 1.8
maskChannelMask {{{parent.Merge9.maskChannelMask}}}
invert_mask {{!Merge9.invert_mask}}
name Multiply7
xpos 70
ypos 2315
disable {{"!maskChannelMask || !\[exists parent.input3.name]"}}
}
Dot {
name Dot23
xpos 104
ypos 2391
}
push $N8c1e2000
push $N8c1e7000
Multiply {
inputs 1+1
channels rgb
value 1.8
maskChannelMask {{{parent.Merge9.maskChannelMask}}}
invert_mask {{parent.Merge9.invert_mask}}
name Multiply2
xpos 290
ypos 2315
disable {{"!maskChannelMask || (!parent.scatter && !parent.external_grain)"}}
}
Merge2 {
inputs 2+1
operation copy
Achannels rgb
Bchannels rgb
output rgb
maskChannelMask -rgba.alpha
name Merge9
xpos 290
ypos 2387
disable {{"!(parent.scatter || parent.external_grain)"}}
}
Dot {
name Dot11
xpos 324
ypos 2490
}
set Nab098a00 [stack 0]
MergeExpression {
inputs 2
temp_name0 reverse
temp_expr0 "1 / MergeExpression1.temp_expr0"
expr0 "Br * Ar * reverse"
expr1 "Bg * Ag * reverse"
expr2 "Bb * Ab * reverse"
name MergeExpression2
xpos 290
ypos 2654
}
Dot {
name Dot8
xpos 324
ypos 2850
}
push $Naa97c800
Merge2 {
inputs 2
operation plus
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge3
xpos 950
ypos 2846
}
Dot {
name Dot42
xpos 984
ypos 3018
}
set Nab09a200 [stack 0]
OCIOColorSpace {
in_colorspace {{OCIOColorSpace1.out_colorspace}}
out_colorspace {{OCIOColorSpace1.in_colorspace}}
name OCIOColorSpace4
xpos 950
ypos 3086
}
Dot {
name Dot19
xpos 984
ypos 3162
}
set Nab0cc400 [stack 0]
Dot {
name Dot41
xpos 1204
ypos 3162
}
set Nab0cc800 [stack 0]
Dot {
name Dot36
xpos 1314
ypos 3162
}
Blur {
channels rgb
size 1
name Blur1
xpos 1280
ypos 3254
}
push $Nab0cc800
Merge2 {
inputs 2
operation difference
bbox B
Achannels rgb
Bchannels rgb
output rgb
name Merge10
xpos 1170
ypos 3254
}
Multiply {
channels rgb
value 50
name Multiply3
xpos 1170
ypos 3302
}
Dot {
name Dot43
xpos 1204
ypos 3402
}
push $Naa97c000
Dot {
name Dot45
xpos 1424
ypos -390
}
push $Nab09a200
Merge2 {
inputs 2
operation from
Achannels rgb
Bchannels rgb
output rgb
name Merge11
xpos 1390
ypos 3014
}
Dot {
name Dot46
xpos 1424
ypos 3522
}
push $Nab098a00
Dot {
name Dot14
xpos 104
ypos 2490
}
Dot {
name Dot12
xpos 104
ypos 3402
}
push $Nadd2a000
Dot {
name Dot47
xpos -556
ypos -390
}
push $Naa952e00
Merge2 {
inputs 2
operation from
Achannels rgb
Bchannels rgb
output rgb
name Merge12
xpos -590
ypos -202
}
Dot {
name Dot10
xpos -556
ypos 3522
}
push $Nab0cc400
Switch {
inputs 5
which {{output}}
name Output
xpos 950
ypos 3656
addUserKnob {20 User}
addUserKnob {4 output M {"regrained comp" "plate grain" "normalised grain" "adapted grain" "grain QC"}}
}
CopyMetaData {
inputs 2
mergeMode "Meta only"
name CopyMetaData1
xpos 950
ypos 3758
}
Output {
name Output1
xpos 950
ypos 3854
}
end_group
CopyMetaData {
inputs 2
name CopyMetaData2
selected true
xpos 951
ypos -2070
}
Dot {
name Dot19
note_font "Gotham Bold Italic"
note_font_size 24
note_font_color 0xff
selected true
xpos 985
ypos -2023
}
set Nadd33e00 [stack 0]
Write {
channels rgba
file "\[file dirname \[value root.name]]/RENDERS/\[lindex \[split \[basename \[value root.name]] .] 0]/\[lindex \[split \[basename \[value root.name]] .] 0].%04d.exr"
colorspace linear
file_type exr
write_ACES_compliant_EXR true
autocrop true
compression "PIZ Wavelet (32 scanlines)"
first_part rgba
create_directories true
checkHashOnRead false
version 14
name Write6
selected true
xpos 951
ypos -1906
}
push $Nadd33e00
OCIOCDLTransform {
slope {0.9179591 0.9270424 0.9324976}
offset {0.050604 0.050604 0.050604}
power {1.0049243 1.0045203 1.0261223}
saturation 1.04
working_space scene_linear
read_from_file true
file "\[join \[lrange \[file split \[value \[topnode].file]] 0 end-1] /]/support_files/\[lindex \[split \[basename \[value \[topnode].file]] .] 0]_BP01_V01.ccc"
cccid DE43521C-9845-42EB-BC52-49186917D223
name OCIOCDLTransform2
selected true
xpos 605
ypos -2026
}
Vectorfield {
vfield_file "\[join \[lrange \[file split \[value \[topnode].file]] 0 end-1] /]/support_files/Watts_High.cube"
version 89
file_type cube
colorspaceIn Log3G10
colorspaceOut sRGB
name Vectorfield2
selected true
xpos 605
ypos -2002
}
Write {
channels rgba
file "\[file dirname \[value root.name]]/RENDERS/\[lindex \[split \[basename \[value root.name]] .] 0].mov"
colorspace sRGB
file_type mov
mov64_format "mov (QuickTime / MOV)"
mov64_codec appr
mov_prores_codec_profile "ProRes 4:4:4:4 XQ 12-bit"
mov_h264_codec_profile "High 4:2:0 8-bit"
mov64_pixel_format {{0}}
mov64_quality High
mov64_fast_start true
mov64_write_timecode true
mov64_gop_size 12
mov64_b_frames 0
mov64_bitrate 20000
mov64_bitrate_tolerance 4000000
mov64_quality_min 1
mov64_quality_max 3
create_directories true
checkHashOnRead false
name Write5
note_font Helvetica
selected true
xpos 605
ypos -1902
}
