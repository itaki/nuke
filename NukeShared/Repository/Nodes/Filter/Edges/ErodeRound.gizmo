#! C:/Program Files/Nuke11.3v4/nuke-11.3.4.dll -nx
version 11.3 v4
Gizmo {
 inputs 2
 addUserKnob {20 ErodeRound}
 addUserKnob {6 gpu l "Use GPU if available" +STARTLINE}
 gpu true
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {7 size t "Erode Size" R -10 10}
 addUserKnob {6 preserve_colors l "Preserve colors" t "Use this option to ensure RGB colors keep the same values (erode/dilate based on luma coefficients)\n\nSlightly slower when enabled." +STARTLINE}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {41 mix T NodeWrapper1.mix}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 copyright l "" +STARTLINE T "ErodeRound v1.0 - 2019 - Erwan Leroy"}
}
 Input {
  inputs 0
  name Inputmask
  xpos 663
  ypos 308
  number 1
 }
 Input {
  inputs 0
  name Input
  xpos 439
  ypos -96
 }
 Constant {
  inputs 0
  channels rgb
  name Constant1
  xpos 611
  ypos -49
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0] "}}
  name Switch2
  xpos 439
  ypos -26
 }
 Dot {
  name Dot1
  xpos 473
  ypos 44
 }
set Nd33e2800 [stack 0]
 BlinkScript {
  ProgramGroup 1
  KernelDescription "2 \"ErodeFineRoundLuma\" iterate pixelWise 075694ed06e05c4ab842c452764d50419a63321616cc05bdb9ad691f38b98c8d 2 \"src\" Read Ranged2D \"dst\" Write Point 1 \"Size\" Float 1 AACAPw== 1 \"size\" 1 1 3 \"srcrangeMin\" Int 2 1 AAAAAAAAAAA= \"srcrangeMax\" Int 2 1 AAAAAAAAAAA= \"s\" Float 1 1 AAAAAA=="
  kernelSource "inline float luma(const float4 color)\n\{\n  return 0.2126*color.x + 0.7152*color.y + 0.0722 * color.z;\n\}\n\nkernel ErodeFineRoundLuma : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRanged2D, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\n\nparam:\n  float size;\n\nlocal:\n  float s; // Absolute size\n\n  void define() \{\n    defineParam(size, \"Size\", 1.0f); \n  \}\n\n  void init() \{\n    //Set the range we need to access from the source \n    s = fabs(size); // Absolute size\n    src.setRange(-ceil(s), -ceil(s), ceil(s), ceil(s));\n\n  \}\n\n  void process() \{\n    SampleType(src) val = src(0,0); // Value, initialized as the current pixel value, then updated in loop \n    SampleType(src) sample_val; // Value of the current pixel being sampled\n\n    float2 v; // position vector\n\n    float val_luma = luma(val);\n    float sample_luma;\n    float alpha;\n\n    // Loop\n    for(int j = -ceil(s); j <= ceil(s); j++) \{\n      for(int i = -ceil(s); i <= ceil(s); i++) \{\n        // Ensure we sample in a circle\n        v = float2(float(i), float(j));\n        float len = length(v);\n        if (len <= s) \{\n          sample_val = src(i, j);\n        \}\n        else if (len < s + 1.0f) \{\n          v = v/len*s;\n          sample_val = bilinear(src, v.x, v.y);\n        \}\n        else \{\n          continue;\n        \}\n        // Check the alpha and the luma separately\n        sample_luma = luma(sample_val);\n        if(size >= 0) \{\n          alpha = max(sample_val.w, val.w);\n          if (sample_luma > val_luma)\{\n            val_luma = sample_luma;\n            val = sample_val;\n          \}\n        \}\n        else \{\n          alpha = min(sample_val.w, val.w);\n          if (sample_luma < val_luma)\{\n            val_luma = sample_luma;\n            val = sample_val;\n          \}\n        \}\n        val.w = alpha;\n      \}\n    \}\n    dst() = val;\n  \}\n\};"
  useGPUIfAvailable {{parent.gpu}}
  rebuild ""
  ErodeFineRoundLuma_Size {{parent.size}}
  rebuild_finalise ""
  name BlinkScript3
  xpos 530
  ypos 141
 }
push $Nd33e2800
 BlinkScript {
  ProgramGroup 1
  KernelDescription "2 \"ErodeFineRound\" iterate componentWise 83ff457401ba42aed7625f20c28505dc1e04d3bed0b86c9b20371ee3b54ab92c 2 \"src\" Read Ranged2D \"dst\" Write Point 1 \"Size\" Float 1 AACAPw== 1 \"size\" 1 1 3 \"srcrangeMin\" Int 2 1 AAAAAAAAAAA= \"srcrangeMax\" Int 2 1 AAAAAAAAAAA= \"s\" Float 1 1 AAAAAA=="
  kernelSource "kernel ErodeFineRound : public ImageComputationKernel<eComponentWise>\n\{\n  Image<eRead, eAccessRanged2D, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\n\nparam:\n  float size;\n\nlocal:\n  float s; // Absolute size\n\n  void define() \{\n    defineParam(size, \"Size\", 1.0f);  \n  \}\n\n  void init() \{\n    //Set the range we need to access from the source \n    s = fabs(size); // Absolute size\n    src.setRange(-ceil(s), -ceil(s), ceil(s), ceil(s));\n\n  \}\n\n  void process() \{\n    float sample_val; // Value of the current pixel being sampled\n    float val = src(0,0); // Value, initialized as the current pixel value, then updated in loop \n    float2 v; // position vector\n    float2 s_v; // scaled position vector\n\n    // Loop\n    for(int j = -ceil(s); j <= ceil(s); j++) \{\n      for(int i = -ceil(s); i <= ceil(s); i++) \{\n        v = float2(float(i), float(j));\n        float len = length(v);\n        if (len <= s) \{\n          sample_val = src(i, j);\n        \}\n        else if (len < s + 1.0f) \{\n          s_v = v/len*s;\n          sample_val = bilinear(src, s_v.x, s_v.y);\n        \}\n        else \{\n          continue;\n        \}\n\n        if(size >= 0) \{\n          val = max(sample_val, val);\n        \}\n        else \{\n          val = min(sample_val, val);\n        \}\n      \}\n    \}\n    dst() = val;\n  \}\n\};"
  useGPUIfAvailable {{parent.gpu}}
  rebuild ""
  ErodeFineRound_Size {{parent.size}}
  rebuild_finalise ""
  name BlinkScript2
  xpos 356
  ypos 139
 }
 Switch {
  inputs 2
  which {{parent.preserve_colors}}
  name Switch1
  xpos 431
  ypos 250
 }
push $Nd33e2800
 Dot {
  name Dot3
  xpos 198
  ypos 44
 }
 Dot {
  name Dot2
  xpos 198
  ypos 312
 }
 NodeWrapper {
  inputs 2+1
  channels rgba
  name NodeWrapper1
  xpos 431
  ypos 308
 }
 Output {
  name Output1
  xpos 431
  ypos 404
 }
end_group
