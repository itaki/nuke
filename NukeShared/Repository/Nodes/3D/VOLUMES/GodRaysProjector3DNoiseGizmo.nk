set cut_paste_input [stack 0]
version 12.2 v1
push $cut_paste_input
Group {
 name GodRaysProjector
 tile_color 0xcc804eff
 selected true
 xpos 452
 ypos 2018
 addUserKnob {20 GodRaysProjector}
 addUserKnob {41 "Local GPU: " T BlinkScript2.gpuName}
 addUserKnob {41 "Use GPU if Available" T BlinkScript2.useGPUIfAvailable}
 addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T BlinkScript2.vectorize}
 addUserKnob {26 gpuPreviewOnly l "" -STARTLINE T "(GPU should be used for preview only)"}
 addUserKnob {26 ""}
 addUserKnob {41 projectionMode l "projection mode" T BlinkScript2.projectionMode}
 addUserKnob {4 deepOutput l output M {RGBA Deep}}
 addUserKnob {41 BlinkPositionProject_iterations l steps T BlinkScript2.BlinkPositionProject_iterations}
 addUserKnob {22 projectImageSetup l "Project Image Setup" T "nuke.root().end()\n\ncardNode = nuke.nodes.Card2()\n\nGodRayNode = nuke.selectedNode()\n\n\nprint GodRayNode.input(2).name()\nprojCamNode = GodRayNode.input(2)\nprojCamName = GodRayNode.input(2).name()\n\nrenderCamNode = GodRayNode.input(1)\n\ncardNode\['z'].setExpression(GodRayNode.name()+'.BlinkScript2.BlinkPositionProject_ZMin')\ncardNode\['lens_in_focal'].setExpression(projCamName+'.focal')\ncardNode\['lens_in_haperture'].setExpression(projCamName+'.haperture')\ncardNode\['useMatrix'].setValue(1)\ncardNode\['rows'].setValue(1)\ncardNode\['columns'].setValue(1)\ncardNode\['matrix'].setExpression(projCamName+'.matrix')\n\nprojectNode = nuke.nodes.Project3D()\nprojectNode.setInput(1,renderCamNode)\n\ncardNode.setInput(0, projectNode)\n\n\nscanlineNode = nuke.nodes.ScanlineRender()\n\nscanlineNode.setInput(1,cardNode)\nscanlineNode.setInput(2,projCamNode)\nscanlineNode\['projection_mode'].setValue('uv')\n\n\n\nGodRayNode.setInput(0,scanlineNode)\n\nscanlineNode\['ypos'].setValue(renderCamNode\['ypos'].value()+80)\nscanlineNode\['xpos'].setValue(renderCamNode\['xpos'].value()+100)\n" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {41 BlinkPositionProject_ZMin l ZMin T BlinkScript2.BlinkPositionProject_ZMin}
 addUserKnob {41 BlinkPositionProject_ZMax l ZMax T BlinkScript2.BlinkPositionProject_ZMax}
 addUserKnob {41 BlinkPositionProject_fromColour l "from colour" T BlinkScript2.BlinkPositionProject_fromColour}
 addUserKnob {41 BlinkPositionProject_toColour l "to colour" T BlinkScript2.BlinkPositionProject_toColour}
 addUserKnob {41 BlinkPositionProject_gamma l gamma T BlinkScript2.BlinkPositionProject_gamma}
 addUserKnob {20 Tweaks n 1}
 Tweaks 0
 addUserKnob {6 clampAlpha l "clamp alpha" +STARTLINE}
 addUserKnob {41 BlinkPositionProject_darkenSource l "darken at source" -STARTLINE T BlinkScript2.BlinkPositionProject_darkenSource}
 addUserKnob {41 parallelBlur l "parallel scale blur" T GodRays1.parallelBlur}
 addUserKnob {41 disable_2 l "both directions" -STARTLINE T Switch1.disable}
 addUserKnob {41 size l "gaussian blur" T Blur1.size}
 addUserKnob {41 BlinkPositionProject_vMult l "vaperture scale" T BlinkScript2.BlinkPositionProject_vMult}
 addUserKnob {20 endGroup n -1}
 addUserKnob {20 positionNode l "3D Noise" n 1}
 positionNode 0
 addUserKnob {41 BlinkPositionProject_enable3DNoise l Enable T BlinkScript2.BlinkPositionProject_enable3DNoise}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis1.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis1.rot_order}
 addUserKnob {41 rotate T Axis1.rotate}
 addUserKnob {41 translate T Axis1.translate}
 addUserKnob {41 scaling l scale T Axis1.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis1.uniform_scale}
 addUserKnob {41 skew T Axis1.skew}
 addUserKnob {41 pivot T Axis1.pivot}
 addUserKnob {26 ""}
 addUserKnob {41 BlinkPositionProject_octaves l octaves T BlinkScript2.BlinkPositionProject_octaves}
 addUserKnob {26 octavesWarning l "" -STARTLINE T "(higher values are much slower)"}
 addUserKnob {41 BlinkPositionProject_persistence l persistence T BlinkScript2.BlinkPositionProject_persistence}
 addUserKnob {41 BlinkPositionProject_noiseGamma l gamma T BlinkScript2.BlinkPositionProject_noiseGamma}
 addUserKnob {41 BlinkPositionProject_seed l seed T BlinkScript2.BlinkPositionProject_seed}
 addUserKnob {26 ""}
 addUserKnob {41 BlinkPositionProject_noiseMix l mix T BlinkScript2.BlinkPositionProject_noiseMix}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {26 credit l "" +STARTLINE T "Chris Fryer | 2020"}
}
 Input {
  inputs 0
  name renderCam
  xpos 2285
  ypos 140
  number 1
 }
 Camera2 {
  inputs 0
  useMatrix true
  matrix {
      {{parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix}}
      {{parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix}}
      {{parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix}}
      {{parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix} {parent.BlinkScript2.BlinkPositionProject_matrix}}
    }
  focal {{parent.BlinkScript2.BlinkPositionProject_focal}}
  haperture {{parent.BlinkScript2.BlinkPositionProject_haperture}}
  vaperture {{parent.BlinkScript2.BlinkPositionProject_vaperture}}
  name Camera1
  xpos 2585
  ypos 268
  disable {{parent.Reconcile3D1.disable}}
 }
push 0
 Reconcile3D {
  inputs 2
  point {{parent.BlinkScript2.BlinkPositionProject_projMatrix.3} {parent.BlinkScript2.BlinkPositionProject_projMatrix.7} {parent.BlinkScript2.BlinkPositionProject_projMatrix.11}}
  calc_output true
  name Reconcile3D1
  xpos 2402
  ypos 330
  disable {{"GodRays1.parallelBlur == 0 ? 1 : 0"}}
 }
 Input {
  inputs 0
  name img
  xpos 2114
  ypos 63
 }
 AdjBBox {
  numpixels 1
  name AdjBBox1
  xpos 2114
  ypos 155
 }
set Nd2765000 [stack 0]
 BlinkScript {
  recompileCount 1089
  ProgramGroup 1
  KernelDescription "2 \"BlinkPositionProject\" iterate pixelWise 9d6a9f1ac5eabfe3d81686ab27e6effe5d96d07bb4f475da1324ef47235b505a 2 \"src\" Read Random \"dst\" Write Random 29 \"darkenSource\" Bool 1 AA== \"fourPointApproximation\" Bool 1 AA== \"darkenAmount\" Float 1 AAAAAA== \"iterations\" Int 1 AAAAAA== \"focal\" Float 1 AAAAAA== \"haperture\" Float 1 AAAAAA== \"vaperture\" Float 1 AAAAAA== \"matrix\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"projFocal\" Float 1 AAAAAA== \"projHaperture\" Float 1 AAAAAA== \"projVaperture\" Float 1 AAAAAA== \"projMatrix\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"projNear\" Float 1 AAAAAA== \"projFar\" Float 1 AAAAAA== \"Z\" Float 1 AAAAAA== \"ZMin\" Float 1 AAAAAA== \"ZMax\" Float 1 AAAAAA== \"vMult\" Float 1 AAAAAA== \"posData\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"fromColour\" Float 1 AAAAAA== \"toColour\" Float 1 AAAAAA== \"gamma\" Float 1 AAAAAA== \"octaves\" Int 1 BAAAAA== \"persistence\" Float 1 AAAAPw== \"scale\" Float 1 bxKDOg== \"noiseScale\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"noiseGamma\" Float 1 AAAAAA== \"seed\" Float 1 AAAAAA== \"enable3DNoise\" Bool 1 AA== 29 \"darkenSource\" 1 1 \"fourPointApproximation\" 1 1 \"darkenAmount\" 1 1 \"iterations\" 1 1 \"focal\" 1 1 \"haperture\" 1 1 \"vaperture\" 1 1 \"matrix\" 16 1 \"projFocal\" 1 1 \"projHaperture\" 1 1 \"projVaperture\" 1 1 \"projMatrix\" 16 1 \"projNear\" 1 1 \"projFar\" 1 1 \"Z\" 1 1 \"ZMin\" 1 1 \"ZMax\" 1 1 \"vMult\" 1 1 \"posData\" 4 1 \"fromColour\" 1 1 \"toColour\" 1 1 \"gamma\" 1 1 \"octaves\" 1 1 \"persistence\" 1 1 \"scale\" 1 1 \"noiseScale\" 3 1 \"noiseGamma\" 1 1 \"seed\" 1 1 \"enable3DNoise\" 1 1 0"
  kernelSource "       kernel BlinkPositionProject : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> src; \n  \n  Image<eWrite, eAccessRandom, eEdgeClamped> dst;\n\n  param:\n\n    bool darkenSource;\n    bool fourPointApproximation;\n    float darkenAmount;\n   \n    int iterations;\n\n   \n\n    float focal;\n    float haperture;\n    float vaperture;\n    float4x4 matrix;\n\n    float projFocal;\n    float projHaperture;\n    float projVaperture;\n    float4x4 projMatrix;\n    float projNear;\n    float projFar;\n\n    float Z;\n    float ZMin;\n    float ZMax;    \n\n    float vMult;\n  \n    float4 posData;\n\n    float fromColour;\n    float toColour;\n    float gamma; \n\n    int octaves;\n    float persistence;\n    float scale;\n    float3 noiseScale;\n    float noiseGamma;\n    float seed;\n    bool enable3DNoise;\n\n    void define() \{\n      defineParam(octaves,      \"octaves\", 4);\n      defineParam(persistence, \"persistence\",  0.5f);\n      defineParam(scale, \"scale\", 0.001f);      \n\n    \}\n\n\n//Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n//Ported by Mads Hagbarth Lund 2014\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= 2;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n  \n\n  void process(int2 position) \{  \n\n    float newZ;      \n\n    float2 resolution;\n    resolution.x = src.bounds.width();\n    resolution.y = src.bounds.height();\n\n    float4 output;\n    float4 projRotated;\n    float4 posDifference;\n\n    float4 posNewPerspective;\n\n    float4 posNewPos;\n\n    float4 uv;\n\n    newZ =  ZMin;\n\n    posData.x = ((((position.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    posData.y = ((((position.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    posData.z = -newZ;\n\n    projRotated.x = projMatrix\[0]\[0]*posData.x + projMatrix\[0]\[1]*posData.y + projMatrix\[0]\[2]*posData.z;\n    projRotated.y = projMatrix\[1]\[0]*posData.x + projMatrix\[1]\[1]*posData.y + projMatrix\[1]\[2]*posData.z;\n    projRotated.z = projMatrix\[2]\[0]*posData.x + projMatrix\[2]\[1]*posData.y + projMatrix\[2]\[2]*posData.z;\n   \n    posDifference.x = projRotated.x + projMatrix\[0]\[3];\n    posDifference.y = projRotated.y + projMatrix\[1]\[3];\n    posDifference.z = projRotated.z + projMatrix\[2]\[3]; \n\n    posNewPos.x = posDifference.x - matrix\[0]\[3];\n    posNewPos.y = posDifference.y - matrix\[1]\[3];\n    posNewPos.z = posDifference.z - matrix\[2]\[3];\n    \n    posNewPerspective.x = matrix\[0]\[0]*posNewPos.x + matrix\[1]\[0]*posNewPos.y + matrix\[2]\[0]*posNewPos.z;\n    posNewPerspective.y = matrix\[0]\[1]*posNewPos.x + matrix\[1]\[1]*posNewPos.y + matrix\[2]\[1]*posNewPos.z;\n    posNewPerspective.z = matrix\[0]\[2]*posNewPos.x + matrix\[1]\[2]*posNewPos.y + matrix\[2]\[2]*posNewPos.z;    \n\n    \n    uv.x = 0.5f - (posNewPerspective.x * ((focal/(haperture))/posNewPerspective.z));\n    uv.y = 0.5f - (posNewPerspective.y * ((focal/(vaperture*vMult))/posNewPerspective.z));\n    uv.z = 1;     \n\n    float4 uvScaled;\n    float4 uvScaledA;\n    float4 uvScaledB;\n\n    uvScaledA.x = uv.x*resolution.x;\n    uvScaledA.y = uv.y*resolution.y;\n\n    float4 noiseInfoA = posDifference;\n\n    //////\n\n    \n\n\n//-------------------------------------\n    newZ =  ZMax;    \n\n    posData.x = ((((position.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    posData.y = ((((position.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    posData.z = -newZ;\n\n    projRotated.x = projMatrix\[0]\[0]*posData.x + projMatrix\[0]\[1]*posData.y + projMatrix\[0]\[2]*posData.z;\n    projRotated.y = projMatrix\[1]\[0]*posData.x + projMatrix\[1]\[1]*posData.y + projMatrix\[1]\[2]*posData.z;\n    projRotated.z = projMatrix\[2]\[0]*posData.x + projMatrix\[2]\[1]*posData.y + projMatrix\[2]\[2]*posData.z;\n   \n    posDifference.x = projRotated.x + projMatrix\[0]\[3];\n    posDifference.y = projRotated.y + projMatrix\[1]\[3];\n    posDifference.z = projRotated.z + projMatrix\[2]\[3]; \n\n    posNewPos.x = posDifference.x - matrix\[0]\[3];\n    posNewPos.y = posDifference.y - matrix\[1]\[3];\n    posNewPos.z = posDifference.z - matrix\[2]\[3];\n    \n    posNewPerspective.x = matrix\[0]\[0]*posNewPos.x + matrix\[1]\[0]*posNewPos.y + matrix\[2]\[0]*posNewPos.z;\n    posNewPerspective.y = matrix\[0]\[1]*posNewPos.x + matrix\[1]\[1]*posNewPos.y + matrix\[2]\[1]*posNewPos.z;\n    posNewPerspective.z = matrix\[0]\[2]*posNewPos.x + matrix\[1]\[2]*posNewPos.y + matrix\[2]\[2]*posNewPos.z;\n    \n    uv.x = 0.5f - (posNewPerspective.x * ((focal/(haperture))/posNewPerspective.z));\n    uv.y = 0.5f - (posNewPerspective.y * ((focal/(vaperture*vMult))/posNewPerspective.z));\n    uv.z = 1;\n\n    uvScaledB.x = uv.x*resolution.x;\n    uvScaledB.y = uv.y*resolution.y;\n\n    float4 noiseInfoB = posDifference;\n    float4 noiseInfo;\n    \n\n/////////////////////////////////////////////\n\n      \n    float4 noiseMult; \n\n    for (float i = 0; i < iterations; i++ )\{\n\n    uvScaled = uvScaledA + (uvScaledB-uvScaledA)*(i/iterations); \n    noiseInfo  = noiseInfoA + (noiseInfoB-noiseInfoA)*(i/iterations); \n    newZ = ZMin + (ZMax-ZMin)*(i/iterations);\n\n    float3 BL;\n    BL.x = ((((0.0f+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    BL.y = ((((0.0f+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    BL.z = -newZ;\n\n    float3 BR;\n    BR.x = ((((resolution.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    BR.y = ((((0.0f+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    BR.z = -newZ;\n\n    float3 TR;\n    TR.x = ((((resolution.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    TR.y = ((((resolution.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    TR.z = -newZ;\n\n    float3 TL;\n    TL.x = ((((0.0f+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    TL.y = ((((resolution.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    TL.z = -newZ;    \n\n    //////        \n\n    float3 positionInfo;\n    float3 positionTemp;    \n\n    positionInfo = BL;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float BLdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    BL.x = uv.x*resolution.x;\n    BL.y = uv.y*resolution.y;\n    BL.z = uv.z; \n\n    positionInfo = BR;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float BRdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    BR.x = uv.x*resolution.x;\n    BR.y = uv.y*resolution.y;\n    //BR.z = uv.z; \n\n\n    positionInfo = TL;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float TLdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    TL.x = uv.x*resolution.x;\n    TL.y = uv.y*resolution.y;\n    //TL.z = uv.z; \n\n    positionInfo = TR;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float TRdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    float4 deep = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    \n    \n    \n    \n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    TR.x = uv.x*resolution.x;\n    TR.y = uv.y*resolution.y;\n    TR.z = uv.z; \n\n    float sigmaX = BL.x - BR.x + TR.x - TL.x;\n    float sigmaY = BL.y - BR.y + TR.y - TL.y;\n\n    float deltaX1 = BR.x - TR.x;\n    float deltaY1 = BR.y - TR.y;\n\n    float deltaX2 = TL.x - TR.x;\n    float deltaY2 = TL.y - TR.y;\n\n    float fractTopG\[1]\[1];\n    fractTopG\[0]\[0] = sigmaX;\n    fractTopG\[1]\[0] = deltaX2;\n    fractTopG\[0]\[1] = sigmaY;\n    fractTopG\[1]\[1] = deltaY2;\n\n    float fractBotG\[1]\[1];\n    fractBotG\[0]\[0] = deltaX1;\n    fractBotG\[1]\[0] = deltaX2;\n    fractBotG\[0]\[1] = deltaY1;\n    fractBotG\[1]\[1] = deltaY2;\n\n    float inverseBotG\[1]\[1];\n    inverseBotG\[0]\[0] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaX1;\n    inverseBotG\[1]\[0] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaX2;\n    inverseBotG\[0]\[1] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaY1;\n    inverseBotG\[1]\[1] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaY2;\n\n    float g;\n    float h;\n\n    g = pow(pow((sigmaX*deltaY2 - deltaX2*sigmaY),2),0.5f) / pow(pow((deltaX1*deltaY2 - deltaX2*deltaY1),2),0.5f);\n    h = pow(pow((deltaX1*sigmaY - sigmaX*deltaY1),2),0.5f) / pow(pow((deltaX1*deltaY2 - deltaX2*deltaY1),2),0.5f);\n\n    float a = position.x - BL.x + g*(position.x);\n    float b = position.x - BL.x + h*(position.x);\n    float c = BL.x;\n    float d = position.y - BL.y + g*(position.y);\n    float e = position.y - BL.y + h*(position.y);\n    float f = BL.y;\n    \n    float4 magicMath;\n\n    float2 N0;\n    N0.x = -(TL.x-BL.x)/sqrt(pow((TL.x-BL.x),2)+pow((TL.y-BL.y),2));\n    N0.y = (TL.y-BL.y)/sqrt(pow((TL.x-BL.x),2)+pow((TL.y-BL.y),2));\n\n    float2 N1;\n    N1.x = (BR.x-BL.x)/sqrt(pow((BR.x-BL.x),2)+pow((BR.y-BL.y),2));\n    N1.y = -(BR.y-BL.y)/sqrt(pow((BR.x-BL.x),2)+pow((BR.y-BL.y),2));\n\n    float2 N2;\n    N2.x = (TR.x-BR.x)/sqrt(pow((TR.x-BR.x),2)+pow((TR.y-BR.y),2));\n    N2.y = -(TR.y-BR.y)/sqrt(pow((TR.x-BR.x),2)+pow((TR.y-BR.y),2));\n\n    float2 N3;\n    N3.x = -(TR.x-TL.x)/sqrt(pow((TR.x-TL.x),2)+pow((TR.y-TL.y),2));\n    N3.y = (TR.y-TL.y)/sqrt(pow((TR.x-TL.x),2)+pow((TR.y-TL.y),2));\n\n    magicMath.z = 0;\n    \n    magicMath.x =    ((((position.x-BL.x)*N0.y)+(position.y-BL.y)*N0.x))  / ( (((position.x-BL.x)*N0.y)+((position.y-BL.y)*N0.x)) + (((position.x-TR.x)*N2.y)+((position.y-TR.y)*N2.x)));               \n    magicMath.y =    ((((position.x-BL.x)*N1.y)+(position.y-BL.y)*N1.x))  / ( (((position.x-BL.x)*N1.y)+((position.y-BL.y)*N1.x)) + (((position.x-TL.x)*N3.y)+((position.y-TL.y)*N3.x)));   \n\n    \n\n       \n\n\n    if (fourPointApproximation == 0)\{\n        if (dst(uvScaled.x,uvScaled.y).y == 0 || dst(uvScaled.x,uvScaled.y).y > deep.w)\{\n\n             dst(uvScaled.x,uvScaled.y) = deep.w;\n            \} \n\n    \}else\{\n\n      deep.w = (BLdepth+(BRdepth-BLdepth)*magicMath.x)+((TLdepth+(TRdepth-TLdepth)*magicMath.x)-(BLdepth+(BRdepth-BLdepth)*magicMath.x))*magicMath.y;\n \n    if(magicMath.x < 0 || magicMath.x > 1 || magicMath.y < 0 || magicMath.y > 1)\{\n      deep.w = 0;\n    \} \n      if (dst(position.x,position.y).y == 0 || dst(position.x,position.y).y > deep.w && deep.w > 0)\{\n              dst(position.x,position.y) = deep.w;\n        \}\n    \}            \n        \n       \n        \n    \}\n\}\n    \n\n\};"
  useGPUIfAvailable {{parent.BlinkScript2.useGPUIfAvailable}}
  rebuild ""
  BlinkPositionProject_darkenSource true
  BlinkPositionProject_fourPointApproximation {{parent.BlinkScript2.BlinkPositionProject_fourPointApproximation}}
  BlinkPositionProject_darkenAmount 1
  BlinkPositionProject_iterations {{parent.BlinkScript2.BlinkPositionProject_iterations}}
  BlinkPositionProject_focal {{"\[topnode parent.input1].focal"}}
  BlinkPositionProject_haperture {{"\[topnode parent.input1].haperture"}}
  BlinkPositionProject_vaperture {{"\[topnode parent.input1].vaperture"}}
  BlinkPositionProject_matrix {
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
    }
  BlinkPositionProject_projFocal {{"\[topnode parent.input2].focal"}}
  BlinkPositionProject_projHaperture {{"\[topnode parent.input2].haperture"}}
  BlinkPositionProject_projVaperture {{"\[topnode parent.input2].vaperture"}}
  BlinkPositionProject_projMatrix {
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
    }
  BlinkPositionProject_projNear 0.1
  BlinkPositionProject_projFar 10
  BlinkPositionProject_ZMin {{parent.BlinkScript2.BlinkPositionProject_ZMin}}
  BlinkPositionProject_ZMax {{parent.BlinkScript2.BlinkPositionProject_ZMax}}
  BlinkPositionProject_vMult {{parent.BlinkScript2.BlinkPositionProject_vMult}}
  BlinkPositionProject_fromColour 1
  BlinkPositionProject_gamma 0.25
  rebuild_finalise ""
  name BlinkScript1
  label closestZ
  xpos 1878
  ypos 224
  disable {{parent.BlinkScript3.disable x26 1}}
 }
push $Nd2765000
 BlinkScript {
  recompileCount 1036
  ProgramGroup 1
  KernelDescription "2 \"BlinkPositionProject\" iterate pixelWise bd68128d59d4505a5b45d182ef194417d8e2ec1c6e51987941a3987820452f2e 2 \"src\" Read Random \"dst\" Write Random 29 \"darkenSource\" Bool 1 AA== \"fourPointApproximation\" Bool 1 AA== \"darkenAmount\" Float 1 AAAAAA== \"iterations\" Int 1 AAAAAA== \"focal\" Float 1 AAAAAA== \"haperture\" Float 1 AAAAAA== \"vaperture\" Float 1 AAAAAA== \"matrix\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"projFocal\" Float 1 AAAAAA== \"projHaperture\" Float 1 AAAAAA== \"projVaperture\" Float 1 AAAAAA== \"projMatrix\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"projNear\" Float 1 AAAAAA== \"projFar\" Float 1 AAAAAA== \"Z\" Float 1 AAAAAA== \"ZMin\" Float 1 AAAAAA== \"ZMax\" Float 1 AAAAAA== \"vMult\" Float 1 AAAAAA== \"posData\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"fromColour\" Float 1 AAAAAA== \"toColour\" Float 1 AAAAAA== \"gamma\" Float 1 AAAAAA== \"octaves\" Int 1 BAAAAA== \"persistence\" Float 1 AAAAPw== \"scale\" Float 1 bxKDOg== \"noiseScale\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"noiseGamma\" Float 1 AAAAAA== \"seed\" Float 1 AAAAAA== \"enable3DNoise\" Bool 1 AA== 29 \"darkenSource\" 1 1 \"fourPointApproximation\" 1 1 \"darkenAmount\" 1 1 \"iterations\" 1 1 \"focal\" 1 1 \"haperture\" 1 1 \"vaperture\" 1 1 \"matrix\" 16 1 \"projFocal\" 1 1 \"projHaperture\" 1 1 \"projVaperture\" 1 1 \"projMatrix\" 16 1 \"projNear\" 1 1 \"projFar\" 1 1 \"Z\" 1 1 \"ZMin\" 1 1 \"ZMax\" 1 1 \"vMult\" 1 1 \"posData\" 4 1 \"fromColour\" 1 1 \"toColour\" 1 1 \"gamma\" 1 1 \"octaves\" 1 1 \"persistence\" 1 1 \"scale\" 1 1 \"noiseScale\" 3 1 \"noiseGamma\" 1 1 \"seed\" 1 1 \"enable3DNoise\" 1 1 0"
  kernelSource "       kernel BlinkPositionProject : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> src; \n  \n  Image<eWrite, eAccessRandom, eEdgeClamped> dst;\n\n  param:\n\n    bool darkenSource;\n    bool fourPointApproximation;\n    float darkenAmount;\n   \n    int iterations;\n\n   \n\n    float focal;\n    float haperture;\n    float vaperture;\n    float4x4 matrix;\n\n    float projFocal;\n    float projHaperture;\n    float projVaperture;\n    float4x4 projMatrix;\n    float projNear;\n    float projFar;\n\n    float Z;\n    float ZMin;\n    float ZMax;    \n\n    float vMult;\n  \n    float4 posData;\n\n    float fromColour;\n    float toColour;\n    float gamma; \n\n    int octaves;\n    float persistence;\n    float scale;\n    float3 noiseScale;\n    float noiseGamma;\n    float seed;\n    bool enable3DNoise;\n\n    void define() \{\n      defineParam(octaves,      \"octaves\", 4);\n      defineParam(persistence, \"persistence\",  0.5f);\n      defineParam(scale, \"scale\", 0.001f);      \n\n    \}\n\n\n//Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n//Ported by Mads Hagbarth Lund 2014\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= 2;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n  \n\n  void process(int2 position) \{  \n\n    float newZ;      \n\n    float2 resolution;\n    resolution.x = src.bounds.width();\n    resolution.y = src.bounds.height();\n\n    float4 output;\n    float4 projRotated;\n    float4 posDifference;\n\n    float4 posNewPerspective;\n\n    float4 posNewPos;\n\n    float4 uv;\n\n    newZ =  ZMin;\n\n    posData.x = ((((position.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    posData.y = ((((position.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    posData.z = -newZ;\n\n    projRotated.x = projMatrix\[0]\[0]*posData.x + projMatrix\[0]\[1]*posData.y + projMatrix\[0]\[2]*posData.z;\n    projRotated.y = projMatrix\[1]\[0]*posData.x + projMatrix\[1]\[1]*posData.y + projMatrix\[1]\[2]*posData.z;\n    projRotated.z = projMatrix\[2]\[0]*posData.x + projMatrix\[2]\[1]*posData.y + projMatrix\[2]\[2]*posData.z;\n   \n    posDifference.x = projRotated.x + projMatrix\[0]\[3];\n    posDifference.y = projRotated.y + projMatrix\[1]\[3];\n    posDifference.z = projRotated.z + projMatrix\[2]\[3]; \n\n    posNewPos.x = posDifference.x - matrix\[0]\[3];\n    posNewPos.y = posDifference.y - matrix\[1]\[3];\n    posNewPos.z = posDifference.z - matrix\[2]\[3];\n    \n    posNewPerspective.x = matrix\[0]\[0]*posNewPos.x + matrix\[1]\[0]*posNewPos.y + matrix\[2]\[0]*posNewPos.z;\n    posNewPerspective.y = matrix\[0]\[1]*posNewPos.x + matrix\[1]\[1]*posNewPos.y + matrix\[2]\[1]*posNewPos.z;\n    posNewPerspective.z = matrix\[0]\[2]*posNewPos.x + matrix\[1]\[2]*posNewPos.y + matrix\[2]\[2]*posNewPos.z;    \n\n    \n    uv.x = 0.5f - (posNewPerspective.x * ((focal/(haperture))/posNewPerspective.z));\n    uv.y = 0.5f - (posNewPerspective.y * ((focal/(vaperture*vMult))/posNewPerspective.z));\n    uv.z = 1;     \n\n    float4 uvScaled;\n    float4 uvScaledA;\n    float4 uvScaledB;\n\n    uvScaledA.x = uv.x*resolution.x;\n    uvScaledA.y = uv.y*resolution.y;\n\n    float4 noiseInfoA = posDifference;\n\n    //////\n\n    \n\n\n//-------------------------------------\n    newZ =  ZMax;    \n\n    posData.x = ((((position.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    posData.y = ((((position.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    posData.z = -newZ;\n\n    projRotated.x = projMatrix\[0]\[0]*posData.x + projMatrix\[0]\[1]*posData.y + projMatrix\[0]\[2]*posData.z;\n    projRotated.y = projMatrix\[1]\[0]*posData.x + projMatrix\[1]\[1]*posData.y + projMatrix\[1]\[2]*posData.z;\n    projRotated.z = projMatrix\[2]\[0]*posData.x + projMatrix\[2]\[1]*posData.y + projMatrix\[2]\[2]*posData.z;\n   \n    posDifference.x = projRotated.x + projMatrix\[0]\[3];\n    posDifference.y = projRotated.y + projMatrix\[1]\[3];\n    posDifference.z = projRotated.z + projMatrix\[2]\[3]; \n\n    posNewPos.x = posDifference.x - matrix\[0]\[3];\n    posNewPos.y = posDifference.y - matrix\[1]\[3];\n    posNewPos.z = posDifference.z - matrix\[2]\[3];\n    \n    posNewPerspective.x = matrix\[0]\[0]*posNewPos.x + matrix\[1]\[0]*posNewPos.y + matrix\[2]\[0]*posNewPos.z;\n    posNewPerspective.y = matrix\[0]\[1]*posNewPos.x + matrix\[1]\[1]*posNewPos.y + matrix\[2]\[1]*posNewPos.z;\n    posNewPerspective.z = matrix\[0]\[2]*posNewPos.x + matrix\[1]\[2]*posNewPos.y + matrix\[2]\[2]*posNewPos.z;\n    \n    uv.x = 0.5f - (posNewPerspective.x * ((focal/(haperture))/posNewPerspective.z));\n    uv.y = 0.5f - (posNewPerspective.y * ((focal/(vaperture*vMult))/posNewPerspective.z));\n    uv.z = 1;\n\n    uvScaledB.x = uv.x*resolution.x;\n    uvScaledB.y = uv.y*resolution.y;\n\n    float4 noiseInfoB = posDifference;\n    float4 noiseInfo;\n    \n\n/////////////////////////////////////////////\n\n      \n    float4 noiseMult; \n\n    for (float i = 0; i < iterations; i++ )\{\n\n    uvScaled = uvScaledA + (uvScaledB-uvScaledA)*(i/iterations); \n    noiseInfo  = noiseInfoA + (noiseInfoB-noiseInfoA)*(i/iterations); \n    newZ = ZMin + (ZMax-ZMin)*(i/iterations);\n\n    float3 BL;\n    BL.x = ((((0.0f+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    BL.y = ((((0.0f+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    BL.z = -newZ;\n\n    float3 BR;\n    BR.x = ((((resolution.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    BR.y = ((((0.0f+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    BR.z = -newZ;\n\n    float3 TR;\n    TR.x = ((((resolution.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    TR.y = ((((resolution.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    TR.z = -newZ;\n\n    float3 TL;\n    TL.x = ((((0.0f+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    TL.y = ((((resolution.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    TL.z = -newZ;    \n\n    //////        \n\n    float3 positionInfo;\n    float3 positionTemp;    \n\n    positionInfo = BL;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float BLdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    BL.x = uv.x*resolution.x;\n    BL.y = uv.y*resolution.y;\n    BL.z = uv.z; \n\n    positionInfo = BR;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float BRdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    BR.x = uv.x*resolution.x;\n    BR.y = uv.y*resolution.y;\n    //BR.z = uv.z; \n\n\n    positionInfo = TL;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float TLdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    TL.x = uv.x*resolution.x;\n    TL.y = uv.y*resolution.y;\n    //TL.z = uv.z; \n\n    positionInfo = TR;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    float TRdepth = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    float4 deep = pow(pow(positionTemp.x,2)+pow(positionTemp.y,2)+pow(positionTemp.z,2),0.5f);\n\n    \n    \n    \n    \n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    TR.x = uv.x*resolution.x;\n    TR.y = uv.y*resolution.y;\n    TR.z = uv.z; \n\n    float sigmaX = BL.x - BR.x + TR.x - TL.x;\n    float sigmaY = BL.y - BR.y + TR.y - TL.y;\n\n    float deltaX1 = BR.x - TR.x;\n    float deltaY1 = BR.y - TR.y;\n\n    float deltaX2 = TL.x - TR.x;\n    float deltaY2 = TL.y - TR.y;\n\n    float fractTopG\[1]\[1];\n    fractTopG\[0]\[0] = sigmaX;\n    fractTopG\[1]\[0] = deltaX2;\n    fractTopG\[0]\[1] = sigmaY;\n    fractTopG\[1]\[1] = deltaY2;\n\n    float fractBotG\[1]\[1];\n    fractBotG\[0]\[0] = deltaX1;\n    fractBotG\[1]\[0] = deltaX2;\n    fractBotG\[0]\[1] = deltaY1;\n    fractBotG\[1]\[1] = deltaY2;\n\n    float inverseBotG\[1]\[1];\n    inverseBotG\[0]\[0] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaX1;\n    inverseBotG\[1]\[0] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaX2;\n    inverseBotG\[0]\[1] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaY1;\n    inverseBotG\[1]\[1] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaY2;\n\n    float g;\n    float h;\n\n    g = pow(pow((sigmaX*deltaY2 - deltaX2*sigmaY),2),0.5f) / pow(pow((deltaX1*deltaY2 - deltaX2*deltaY1),2),0.5f);\n    h = pow(pow((deltaX1*sigmaY - sigmaX*deltaY1),2),0.5f) / pow(pow((deltaX1*deltaY2 - deltaX2*deltaY1),2),0.5f);\n\n    float a = position.x - BL.x + g*(position.x);\n    float b = position.x - BL.x + h*(position.x);\n    float c = BL.x;\n    float d = position.y - BL.y + g*(position.y);\n    float e = position.y - BL.y + h*(position.y);\n    float f = BL.y;\n    \n    float4 magicMath;\n\n    float2 N0;\n    N0.x = -(TL.x-BL.x)/sqrt(pow((TL.x-BL.x),2)+pow((TL.y-BL.y),2));\n    N0.y = (TL.y-BL.y)/sqrt(pow((TL.x-BL.x),2)+pow((TL.y-BL.y),2));\n\n    float2 N1;\n    N1.x = (BR.x-BL.x)/sqrt(pow((BR.x-BL.x),2)+pow((BR.y-BL.y),2));\n    N1.y = -(BR.y-BL.y)/sqrt(pow((BR.x-BL.x),2)+pow((BR.y-BL.y),2));\n\n    float2 N2;\n    N2.x = (TR.x-BR.x)/sqrt(pow((TR.x-BR.x),2)+pow((TR.y-BR.y),2));\n    N2.y = -(TR.y-BR.y)/sqrt(pow((TR.x-BR.x),2)+pow((TR.y-BR.y),2));\n\n    float2 N3;\n    N3.x = -(TR.x-TL.x)/sqrt(pow((TR.x-TL.x),2)+pow((TR.y-TL.y),2));\n    N3.y = (TR.y-TL.y)/sqrt(pow((TR.x-TL.x),2)+pow((TR.y-TL.y),2));\n\n    magicMath.z = 0;\n    \n    magicMath.x =    ((((position.x-BL.x)*N0.y)+(position.y-BL.y)*N0.x))  / ( (((position.x-BL.x)*N0.y)+((position.y-BL.y)*N0.x)) + (((position.x-TR.x)*N2.y)+((position.y-TR.y)*N2.x)));               \n    magicMath.y =    ((((position.x-BL.x)*N1.y)+(position.y-BL.y)*N1.x))  / ( (((position.x-BL.x)*N1.y)+((position.y-BL.y)*N1.x)) + (((position.x-TL.x)*N3.y)+((position.y-TL.y)*N3.x)));   \n\n    \n\n       \n\n\n    if (fourPointApproximation == 0)\{\n        if (dst(uvScaled.x,uvScaled.y).y == 0 || dst(uvScaled.x,uvScaled.y).y < deep.w)\{\n\n             dst(uvScaled.x,uvScaled.y) = deep.w;\n            \} \n\n    \}else\{\n\n      deep.w = (BLdepth+(BRdepth-BLdepth)*magicMath.x)+((TLdepth+(TRdepth-TLdepth)*magicMath.x)-(BLdepth+(BRdepth-BLdepth)*magicMath.x))*magicMath.y;\n \n    if(magicMath.x < 0 || magicMath.x > 1 || magicMath.y < 0 || magicMath.y > 1)\{\n      deep.w = 0;\n    \} \n      if (dst(position.x,position.y).y == 0 || dst(position.x,position.y).y < deep.w && deep.w > 0)\{\n              dst(position.x,position.y) = deep.w;\n        \}\n    \}            \n        \n       \n        \n    \}\n\}\n    \n\n\};"
  useGPUIfAvailable false
  rebuild ""
  BlinkPositionProject_fourPointApproximation {{parent.BlinkScript2.BlinkPositionProject_fourPointApproximation}}
  BlinkPositionProject_iterations {{parent.BlinkScript2.BlinkPositionProject_iterations}}
  BlinkPositionProject_focal {{"\[topnode parent.input1].focal"}}
  BlinkPositionProject_haperture {{"\[topnode parent.input1].haperture"}}
  BlinkPositionProject_vaperture {{"\[topnode parent.input1].vaperture"}}
  BlinkPositionProject_matrix {
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
    }
  BlinkPositionProject_projFocal {{"\[topnode parent.input2].focal"}}
  BlinkPositionProject_projHaperture {{"\[topnode parent.input2].haperture"}}
  BlinkPositionProject_projVaperture {{"\[topnode parent.input2].vaperture"}}
  BlinkPositionProject_projMatrix {
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
    }
  BlinkPositionProject_projNear 0.1
  BlinkPositionProject_projFar 10
  BlinkPositionProject_ZMin {{parent.BlinkScript2.BlinkPositionProject_ZMin}}
  BlinkPositionProject_ZMax {{parent.BlinkScript2.BlinkPositionProject_ZMax}}
  BlinkPositionProject_vMult {{parent.BlinkScript2.BlinkPositionProject_vMult}}
  BlinkPositionProject_fromColour 1
  BlinkPositionProject_gamma 0.25
  rebuild_finalise ""
  name BlinkScript3
  label farthestZ
  xpos 1964
  ypos 223
  disable {{1-parent.deepOutput}}
 }
push $Nd2765000
 BlinkScript {
  recompileCount 1124
  ProgramGroup 1
  KernelDescription "2 \"BlinkPositionProject\" iterate pixelWise 2cf2841880336d72c83da92373bf4ac1cc77ba2da9c2ea541c7cddb821e6d6fe 2 \"src\" Read Random \"dst\" Write Random 31 \"darkenSource\" Bool 1 AA== \"fourPointApproximation\" Bool 1 AA== \"darkenAmount\" Float 1 AAAAAA== \"iterations\" Int 1 AAAAAA== \"focal\" Float 1 AAAAAA== \"haperture\" Float 1 AAAAAA== \"vaperture\" Float 1 AAAAAA== \"matrix\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"projFocal\" Float 1 AAAAAA== \"projHaperture\" Float 1 AAAAAA== \"projVaperture\" Float 1 AAAAAA== \"projMatrix\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"projNear\" Float 1 AAAAAA== \"projFar\" Float 1 AAAAAA== \"Z\" Float 1 AAAAAA== \"ZMin\" Float 1 AAAAAA== \"ZMax\" Float 1 AAAAAA== \"vMult\" Float 1 AAAAAA== \"posData\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"fromColour\" Float 1 AAAAAA== \"toColour\" Float 1 AAAAAA== \"gamma\" Float 1 AAAAAA== \"octaves\" Int 1 BAAAAA== \"persistence\" Float 1 AAAAPw== \"scale\" Float 1 bxKDOg== \"noiseScale\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"noiseGamma\" Float 1 AAAAAA== \"seed\" Float 1 AAAAAA== \"enable3DNoise\" Bool 1 AA== \"noiseMix\" Float 1 AAAAAA== \"axisAdjustmentMatrix\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== 31 \"darkenSource\" 1 1 \"fourPointApproximation\" 1 1 \"darkenAmount\" 1 1 \"iterations\" 1 1 \"focal\" 1 1 \"haperture\" 1 1 \"vaperture\" 1 1 \"matrix\" 16 1 \"projFocal\" 1 1 \"projHaperture\" 1 1 \"projVaperture\" 1 1 \"projMatrix\" 16 1 \"projNear\" 1 1 \"projFar\" 1 1 \"Z\" 1 1 \"ZMin\" 1 1 \"ZMax\" 1 1 \"vMult\" 1 1 \"posData\" 4 1 \"fromColour\" 1 1 \"toColour\" 1 1 \"gamma\" 1 1 \"octaves\" 1 1 \"persistence\" 1 1 \"scale\" 1 1 \"noiseScale\" 3 1 \"noiseGamma\" 1 1 \"seed\" 1 1 \"enable3DNoise\" 1 1 \"noiseMix\" 1 1 \"axisAdjustmentMatrix\" 16 1 0"
  kernelSource "       kernel BlinkPositionProject : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> src;\n  \n  \n  Image<eWrite, eAccessRandom, eEdgeClamped> dst;\n\n  param:\n\n    bool darkenSource;\n    bool fourPointApproximation;\n    float darkenAmount;\n   \n    int iterations;\n\n   \n\n    float focal;\n    float haperture;\n    float vaperture;\n    float4x4 matrix;\n\n    float projFocal;\n    float projHaperture;\n    float projVaperture;\n    float4x4 projMatrix;\n    float projNear;\n    float projFar;\n\n    float Z;\n    float ZMin;\n    float ZMax;    \n\n    float vMult;\n  \n    float4 posData;\n\n    float fromColour;\n    float toColour;\n    float gamma; \n\n    int octaves;\n    float persistence;\n    float scale;\n    float3 noiseScale;\n    float noiseGamma;\n    float seed;\n    bool enable3DNoise;\n    float noiseMix;\n\n    float4x4 axisAdjustmentMatrix;\n\n\n    void define() \{\n      defineParam(octaves,      \"octaves\", 4);\n      defineParam(persistence, \"persistence\",  0.5f);\n      defineParam(scale, \"scale\", 0.001f);      \n\n    \}\n\n\n//Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n//Ported by Mads Hagbarth Lund 2014\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= 2;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n  \n\n  void process(int2 position) \{  \n\n    float newZ;      \n\n    float2 resolution;\n    resolution.x = src.bounds.width();\n    resolution.y = src.bounds.height();\n\n    float4 output;\n    float4 projRotated;\n    float4 posDifference;\n\n    float4 posNewPerspective;\n\n    float4 posNewPos;\n\n    float4 uv;\n\n    newZ =  ZMin;\n\n    posData.x = ((((position.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    posData.y = ((((position.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    posData.z = -newZ;\n\n    projRotated.x = projMatrix\[0]\[0]*posData.x + projMatrix\[0]\[1]*posData.y + projMatrix\[0]\[2]*posData.z;\n    projRotated.y = projMatrix\[1]\[0]*posData.x + projMatrix\[1]\[1]*posData.y + projMatrix\[1]\[2]*posData.z;\n    projRotated.z = projMatrix\[2]\[0]*posData.x + projMatrix\[2]\[1]*posData.y + projMatrix\[2]\[2]*posData.z;\n   \n    posDifference.x = projRotated.x + projMatrix\[0]\[3];\n    posDifference.y = projRotated.y + projMatrix\[1]\[3];\n    posDifference.z = projRotated.z + projMatrix\[2]\[3]; \n\n    posNewPos.x = posDifference.x - matrix\[0]\[3];\n    posNewPos.y = posDifference.y - matrix\[1]\[3];\n    posNewPos.z = posDifference.z - matrix\[2]\[3];\n    \n    posNewPerspective.x = matrix\[0]\[0]*posNewPos.x + matrix\[1]\[0]*posNewPos.y + matrix\[2]\[0]*posNewPos.z;\n    posNewPerspective.y = matrix\[0]\[1]*posNewPos.x + matrix\[1]\[1]*posNewPos.y + matrix\[2]\[1]*posNewPos.z;\n    posNewPerspective.z = matrix\[0]\[2]*posNewPos.x + matrix\[1]\[2]*posNewPos.y + matrix\[2]\[2]*posNewPos.z;    \n\n    \n    uv.x = 0.5f - (posNewPerspective.x * ((focal/(haperture))/posNewPerspective.z));\n    uv.y = 0.5f - (posNewPerspective.y * ((focal/(vaperture*vMult))/posNewPerspective.z));\n    uv.z = 1;     \n\n    float4 uvScaled;\n    float4 uvScaledA;\n    float4 uvScaledB;\n\n    uvScaledA.x = uv.x*resolution.x;\n    uvScaledA.y = uv.y*resolution.y;\n\n    float4 noiseInfoA = posDifference;\n\n    \n    //////\n\n    \n\n\n//-------------------------------------\n    newZ =  ZMax;    \n\n    posData.x = ((((position.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    posData.y = ((((position.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    posData.z = -newZ;\n\n    projRotated.x = projMatrix\[0]\[0]*posData.x + projMatrix\[0]\[1]*posData.y + projMatrix\[0]\[2]*posData.z;\n    projRotated.y = projMatrix\[1]\[0]*posData.x + projMatrix\[1]\[1]*posData.y + projMatrix\[1]\[2]*posData.z;\n    projRotated.z = projMatrix\[2]\[0]*posData.x + projMatrix\[2]\[1]*posData.y + projMatrix\[2]\[2]*posData.z;\n   \n    posDifference.x = projRotated.x + projMatrix\[0]\[3];\n    posDifference.y = projRotated.y + projMatrix\[1]\[3];\n    posDifference.z = projRotated.z + projMatrix\[2]\[3]; \n\n    posNewPos.x = posDifference.x - matrix\[0]\[3];\n    posNewPos.y = posDifference.y - matrix\[1]\[3];\n    posNewPos.z = posDifference.z - matrix\[2]\[3];\n    \n    posNewPerspective.x = matrix\[0]\[0]*posNewPos.x + matrix\[1]\[0]*posNewPos.y + matrix\[2]\[0]*posNewPos.z;\n    posNewPerspective.y = matrix\[0]\[1]*posNewPos.x + matrix\[1]\[1]*posNewPos.y + matrix\[2]\[1]*posNewPos.z;\n    posNewPerspective.z = matrix\[0]\[2]*posNewPos.x + matrix\[1]\[2]*posNewPos.y + matrix\[2]\[2]*posNewPos.z;\n    \n    uv.x = 0.5f - (posNewPerspective.x * ((focal/(haperture))/posNewPerspective.z));\n    uv.y = 0.5f - (posNewPerspective.y * ((focal/(vaperture*vMult))/posNewPerspective.z));\n    uv.z = 1;\n\n    uvScaledB.x = uv.x*resolution.x;\n    uvScaledB.y = uv.y*resolution.y;\n\n    \n\n\n    float4 noiseInfoB = posDifference;\n    float4 noiseInfo;\n    float4 tempNoiseInfo;\n    \n\n/////////////////////////////////////////////\n\n      \n    float4 noiseMult; \n\n    for (float i = 0; i < iterations; i++ )\{\n\n    uvScaled = uvScaledA + (uvScaledB-uvScaledA)*(i/iterations); \n    tempNoiseInfo  = noiseInfoA + (noiseInfoB-noiseInfoA)*(i/iterations); \n\n    noiseInfo.x = axisAdjustmentMatrix\[0]\[0]*tempNoiseInfo.x + axisAdjustmentMatrix\[0]\[1]*tempNoiseInfo.y + axisAdjustmentMatrix\[0]\[2]*tempNoiseInfo.z + axisAdjustmentMatrix\[0]\[3];\n    noiseInfo.y = axisAdjustmentMatrix\[1]\[0]*tempNoiseInfo.x + axisAdjustmentMatrix\[1]\[1]*tempNoiseInfo.y + axisAdjustmentMatrix\[1]\[2]*tempNoiseInfo.z + axisAdjustmentMatrix\[1]\[3];\n    noiseInfo.z = axisAdjustmentMatrix\[2]\[0]*tempNoiseInfo.x + axisAdjustmentMatrix\[2]\[1]*tempNoiseInfo.y + axisAdjustmentMatrix\[2]\[2]*tempNoiseInfo.z + axisAdjustmentMatrix\[2]\[3];\n\n\n\n    newZ = ZMin + (ZMax-ZMin)*(i/iterations);\n\n    float3 BL;\n    BL.x = ((((0.0f+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    BL.y = ((((0.0f+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    BL.z = -newZ;\n\n    float3 BR;\n    BR.x = ((((resolution.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    BR.y = ((((0.0f+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    BR.z = -newZ;\n\n    float3 TR;\n    TR.x = ((((resolution.x+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    TR.y = ((((resolution.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    TR.z = -newZ;\n\n    float3 TL;\n    TL.x = ((((0.0f+.5f))/resolution.x-.5f)*projHaperture/projFocal)*newZ;\n    TL.y = ((((resolution.y+.5f))/resolution.y-.5f)*(resolution.y/resolution.x)*projHaperture/projFocal)*newZ;\n    TL.z = -newZ;    \n\n    //////        \n\n    float3 positionInfo;\n    float3 positionTemp;    \n\n    positionInfo = BL;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    BL.x = uv.x*resolution.x;\n    BL.y = uv.y*resolution.y;\n    BL.z = uv.z; \n\n    positionInfo = BR;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    BR.x = uv.x*resolution.x;\n    BR.y = uv.y*resolution.y;\n    BR.z = uv.z; \n\n\n    positionInfo = TL;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    TL.x = uv.x*resolution.x;\n    TL.y = uv.y*resolution.y;\n    TL.z = uv.z; \n\n    positionInfo = TR;\n\n    positionTemp.x = projMatrix\[0]\[0]*positionInfo.x + projMatrix\[0]\[1]*positionInfo.y + projMatrix\[0]\[2]*positionInfo.z;\n    positionTemp.y = projMatrix\[1]\[0]*positionInfo.x + projMatrix\[1]\[1]*positionInfo.y + projMatrix\[1]\[2]*positionInfo.z;\n    positionTemp.z = projMatrix\[2]\[0]*positionInfo.x + projMatrix\[2]\[1]*positionInfo.y + projMatrix\[2]\[2]*positionInfo.z;\n       \n    positionInfo.x = positionTemp.x + projMatrix\[0]\[3];\n    positionInfo.y = positionTemp.y + projMatrix\[1]\[3];\n    positionInfo.z = positionTemp.z + projMatrix\[2]\[3]; \n\n    positionInfo.x = positionInfo.x - matrix\[0]\[3];\n    positionInfo.y = positionInfo.y - matrix\[1]\[3];\n    positionInfo.z = positionInfo.z - matrix\[2]\[3];\n        \n    positionTemp.x = matrix\[0]\[0]*positionInfo.x + matrix\[1]\[0]*positionInfo.y + matrix\[2]\[0]*positionInfo.z;\n    positionTemp.y = matrix\[0]\[1]*positionInfo.x + matrix\[1]\[1]*positionInfo.y + matrix\[2]\[1]*positionInfo.z;\n    positionTemp.z = matrix\[0]\[2]*positionInfo.x + matrix\[1]\[2]*positionInfo.y + matrix\[2]\[2]*positionInfo.z; \n\n    uv.x = 0.5f - (positionTemp.x * ((focal/(haperture))/positionTemp.z));\n    uv.y = 0.5f - (positionTemp.y * ((focal/(vaperture*vMult))/positionTemp.z));\n    uv.z = 1;      \n\n    TR.x = uv.x*resolution.x;\n    TR.y = uv.y*resolution.y;\n    TR.z = uv.z; \n\n    float sigmaX = BL.x - BR.x + TR.x - TL.x;\n    float sigmaY = BL.y - BR.y + TR.y - TL.y;\n\n    float deltaX1 = BR.x - TR.x;\n    float deltaY1 = BR.y - TR.y;\n\n    float deltaX2 = TL.x - TR.x;\n    float deltaY2 = TL.y - TR.y;\n\n    float fractTopG\[1]\[1];\n    fractTopG\[0]\[0] = sigmaX;\n    fractTopG\[1]\[0] = deltaX2;\n    fractTopG\[0]\[1] = sigmaY;\n    fractTopG\[1]\[1] = deltaY2;\n\n    float fractBotG\[1]\[1];\n    fractBotG\[0]\[0] = deltaX1;\n    fractBotG\[1]\[0] = deltaX2;\n    fractBotG\[0]\[1] = deltaY1;\n    fractBotG\[1]\[1] = deltaY2;\n\n    float inverseBotG\[1]\[1];\n    inverseBotG\[0]\[0] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaX1;\n    inverseBotG\[1]\[0] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaX2;\n    inverseBotG\[0]\[1] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaY1;\n    inverseBotG\[1]\[1] = (1/((fractBotG\[0]\[0]*fractBotG\[1]\[1])-(fractBotG\[1]\[0]*fractBotG\[0]\[1])))*deltaY2;\n\n    float g;\n    float h;\n\n    g = pow(pow((sigmaX*deltaY2 - deltaX2*sigmaY),2),0.5f) / pow(pow((deltaX1*deltaY2 - deltaX2*deltaY1),2),0.5f);\n    h = pow(pow((deltaX1*sigmaY - sigmaX*deltaY1),2),0.5f) / pow(pow((deltaX1*deltaY2 - deltaX2*deltaY1),2),0.5f);\n\n    float a = position.x - BL.x + g*(position.x);\n    float b = position.x - BL.x + h*(position.x);\n    float c = BL.x;\n    float d = position.y - BL.y + g*(position.y);\n    float e = position.y - BL.y + h*(position.y);\n    float f = BL.y;\n    \n    float4 magicMath;\n\n    float2 N0;\n    N0.x = -(TL.x-BL.x)/sqrt(pow((TL.x-BL.x),2)+pow((TL.y-BL.y),2));\n    N0.y = (TL.y-BL.y)/sqrt(pow((TL.x-BL.x),2)+pow((TL.y-BL.y),2));\n\n    float2 N1;\n    N1.x = (BR.x-BL.x)/sqrt(pow((BR.x-BL.x),2)+pow((BR.y-BL.y),2));\n    N1.y = -(BR.y-BL.y)/sqrt(pow((BR.x-BL.x),2)+pow((BR.y-BL.y),2));\n\n    float2 N2;\n    N2.x = (TR.x-BR.x)/sqrt(pow((TR.x-BR.x),2)+pow((TR.y-BR.y),2));\n    N2.y = -(TR.y-BR.y)/sqrt(pow((TR.x-BR.x),2)+pow((TR.y-BR.y),2));\n\n    float2 N3;\n    N3.x = -(TR.x-TL.x)/sqrt(pow((TR.x-TL.x),2)+pow((TR.y-TL.y),2));\n    N3.y = (TR.y-TL.y)/sqrt(pow((TR.x-TL.x),2)+pow((TR.y-TL.y),2));\n\n   \n    magicMath.z = 0;\n    \n    magicMath.x =    ((((position.x-BL.x)*N0.y)+(position.y-BL.y)*N0.x))  / ( (((position.x-BL.x)*N0.y)+((position.y-BL.y)*N0.x)) + (((position.x-TR.x)*N2.y)+((position.y-TR.y)*N2.x)));               \n    magicMath.y =    ((((position.x-BL.x)*N1.y)+(position.y-BL.y)*N1.x))  / ( (((position.x-BL.x)*N1.y)+((position.y-BL.y)*N1.x)) + (((position.x-TL.x)*N3.y)+((position.y-TL.y)*N3.x))); \n\n\n    if (enable3DNoise == 1)\{       \n\n\n          float sample = (float)octave_noise_4d(float(octaves),persistence,1.0f/scale,noiseInfo.x/noiseScale.x,noiseInfo.y/noiseScale.y,noiseInfo.z/noiseScale.z,seed);\n          noiseMult = pow(((sample+1.0f)/2.0f),1/noiseGamma); \n          noiseMult = 1.0f + (noiseMult-1.0f)*noiseMix;\n\n        \} else \{\n          noiseMult = 1;\n        \}\n    \n    \n    if (darkenSource == 1 && fourPointApproximation == 1)\{           \n        \n        dst(position.x,position.y) += (bilinear(src,magicMath.x*resolution.x,magicMath.y*resolution.y)/(iterations/((i+1)/iterations)))*(pow((fromColour+(toColour-fromColour)*(i/iterations)),1/gamma))*noiseMult;\n        \} else if(darkenSource == 1 && fourPointApproximation == 0)\{\n        dst(uvScaled.x,uvScaled.y) += (bilinear(src,position.x,position.y)/(iterations/((i+1)/iterations)))*(pow((fromColour+(toColour-fromColour)*(i/iterations)),1/gamma))*noiseMult;\n        \}else if(darkenSource == 0 && fourPointApproximation == 1)\{        \n            dst(position.x,position.y) += (bilinear(src,magicMath.x*resolution.x,magicMath.y*resolution.y)/(iterations))*(pow((fromColour+(toColour-fromColour)*(i/iterations)),1/gamma))*noiseMult;\n        \}else if(darkenSource == 0 && fourPointApproximation == 0)\{ \n            dst(uvScaled.x,uvScaled.y) += (bilinear(src,position.x,position.y)/(iterations))*(pow((fromColour+(toColour-fromColour)*(i/iterations)),1/gamma))*noiseMult;\n        \}\n        \n        \n    \}\n\}\n    \n\n\};"
  useGPUIfAvailable false
  rebuild ""
  BlinkPositionProject_fourPointApproximation {{projectionMode}}
  BlinkPositionProject_darkenAmount 1
  BlinkPositionProject_iterations 1
  BlinkPositionProject_focal {{"\[topnode parent.input1].focal"}}
  BlinkPositionProject_haperture {{"\[topnode parent.input1].haperture"}}
  BlinkPositionProject_vaperture {{"\[topnode parent.input1].vaperture"}}
  BlinkPositionProject_matrix {
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
      {{"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"} {"\[topnode parent.input1].world_matrix"}}
    }
  BlinkPositionProject_projFocal {{"\[topnode parent.input2].focal"}}
  BlinkPositionProject_projHaperture {{"\[topnode parent.input2].haperture"}}
  BlinkPositionProject_projVaperture {{"\[topnode parent.input2].vaperture"}}
  group_BlinkPositionProject_projMatrix 1
  BlinkPositionProject_projMatrix {
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
      {{"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"} {"\[topnode parent.input2].world_matrix"}}
    }
  BlinkPositionProject_projNear 0.1
  BlinkPositionProject_projFar 3
  BlinkPositionProject_ZMin 1
  BlinkPositionProject_ZMax 2
  BlinkPositionProject_vMult 1
  BlinkPositionProject_fromColour 1
  BlinkPositionProject_gamma 0.5
  BlinkPositionProject_octaves 1
  BlinkPositionProject_scale 1
  BlinkPositionProject_noiseScale {1 1 1}
  BlinkPositionProject_noiseGamma 0.5
  BlinkPositionProject_noiseMix 1
  BlinkPositionProject_axisAdjustmentMatrix {
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
    }
  rebuild_finalise ""
  name BlinkScript2
  xpos 2114
  ypos 194
  addUserKnob {20 User}
  addUserKnob {4 projectionMode l "Projection Mode" M {"Default Projection" "4 Point Approximation"}}
 }
set Nd2764400 [stack 0]
add_layer {GodRaysDeep GodRaysDeep.front GodRaysDeep.back}
 Copy {
  inputs 2
  from0 rgba.red
  to0 GodRaysDeep.back
  name Copy1
  xpos 2114
  ypos 253
  disable {{1-parent.deepOutput}}
 }
 Copy {
  inputs 2
  from0 rgba.red
  to0 GodRaysDeep.front
  name Copy2
  xpos 2114
  ypos 291
  disable {{1-parent.deepOutput}}
 }
 Position {
  translate {-1 -1}
  name Position1
  xpos 2114
  ypos 334
 }
 AdjBBox {
  numpixels -1
  name AdjBBox2
  xpos 2114
  ypos 366
 }
 Expression {
  channel0 none
  channel1 none
  channel2 none
  channel3 alpha
  expr3 "a > 1 ? 1 : a"
  name Expression1
  xpos 2114
  ypos 400
  disable {{1-parent.clampAlpha}}
 }
 Multiply {
  channels rgba
  value 3.5
  name Multiply1
  xpos 2114
  ypos 426
  disable {{max(1-parent.BlinkScript2.useGPUIfAvailable,BlinkScript2.BlinkPositionProject_fourPointApproximation)}}
 }
 GodRays {
  scale {{1+parallelBlur}}
  center {{parent.Reconcile3D1.output} {parent.Reconcile3D1.output}}
  steps 10
  name GodRays1
  xpos 2114
  ypos 452
  disable {{parent.Reconcile3D1.disable}}
  addUserKnob {20 User}
  addUserKnob {7 parallelBlur l "parallel scale blur"}
 }
set N1273a400 [stack 0]
push $N1273a400
 GodRays {
  scale {{1/parent.GodRays1.scale}}
  center {{parent.Reconcile3D1.output} {parent.Reconcile3D1.output}}
  name GodRays2
  xpos 2222
  ypos 479
  disable {{parent.Reconcile3D1.disable}}
 }
 Switch {
  inputs 2
  which 1
  name Switch1
  xpos 2114
  ypos 512
  disable true
 }
 Blur {
  name Blur1
  xpos 2114
  ypos 538
 }
set N12739800 [stack 0]
 DeepFromImage {
  premult true
  z 0.084
  name DeepFromImage1
  xpos 2228
  ypos 544
  disable {{1-parent.deepOutput}}
 }
 DeepExpression {
  chans1 deep
  chans2 GodRaysDeep
  deep.front GodRaysDeep.front
  deep.back GodRaysDeep.back
  name DeepExpression1
  xpos 2228
  ypos 570
  disable {{1-parent.deepOutput}}
 }
push $N12739800
 Switch {
  inputs 2
  which {{parent.deepOutput}}
  name Switch2
  xpos 2114
  ypos 630
 }
 Output {
  name Output1
  xpos 2114
  ypos 687
 }
 Input {
  inputs 0
  name projectionCam
  xpos 1973
  ypos 127
  number 2
 }
push $Nd2764400
 Viewer {
  frame_range 1-48
  gain 0.045
  name Viewer1
  xpos 1945
  ypos 323
 }
 Axis2 {
  inputs 0
  name Axis1
  label "3D Noise Adjuster"
  xpos 2488
  ypos 174
 }
end_group
