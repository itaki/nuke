set cut_paste_input [stack 0]
version 7.0 v4
Group {
 inputs 0
 name TX_Disabler_new
 help "TX_Disable allows to manage a big amount of time consuming nodes from one place. You can activates or desactivate them all at once, or by type or even by name without to worry about thinking to switch them back on before render\n\n// 2.0\nby Tomas Lefebvre\nlefebvre.tomas@gmail.com"
 knobChanged "\n\nthisNode = nuke.thisNode()\nk = nuke.thisKnob()\nif k.name() == \"classList\":\n    classListCB = k.value()\n    thisNode\['type'].setValues( sorted(classListCB.splitlines(True)))\n\n"
 tile_color 0xc0c0cff
 note_font "Bitstream Vera Sans"
 selected true
 xpos -45
 ypos -129
 postage_stamp true
 addUserKnob {20 Settings}
 addUserKnob {22 BTenable l "  enable  " T "import pickle\n\n##Variables\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nmyType = thisNode\['type'].value().split('\\n')\[0]\nselection = thisNode\['selection'].value()\n\nmyList = pickle.loads(cluster.value())\n\n\n\n##Create List\ntoProcessList = \[]\nif selection == 'None':\n    print ('None')\nelif selection == 'All':\n    toProcessList = myList\nelse :\n    if selection.split('/')\[1] == 'All':\n        root.begin()\n        for n in myList:\n            if nuke.toNode(n).Class() == selection.split('/')\[0]:\n                toProcessList.append(nuke.toNode(n).name())\n        root.end()\n    else :\n        toProcessList = \[selection.split('/')\[1]]\n\n\nroot.begin()\nfor n in toProcessList:\n    nuke.toNode(n)\['disable'].setExpression('')" +STARTLINE}
 addUserKnob {22 BTdisable l "  disable  " -STARTLINE T "import pickle\n\n##Variables\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nmyType = thisNode\['type'].value().split('\\n')\[0]\nselection = thisNode\['selection'].value()\n\nmyList = pickle.loads(cluster.value())\n\n\n\n##Create List\ntoProcessList = \[]\nif selection == 'None':\n    print ('None')\nelif selection == 'All':\n    toProcessList = myList\nelse :\n    if selection.split('/')\[1] == 'All':\n        root.begin()\n        for n in myList:\n            if nuke.toNode(n).Class() == selection.split('/')\[0]:\n                toProcessList.append(nuke.toNode(n).name())\n        root.end()\n    else :\n        toProcessList = \[selection.split('/')\[1]]\n\n\nroot.begin()\nfor n in toProcessList:\n    nuke.toNode(n)\['disable'].setExpression('\$gui')"}
 addUserKnob {26 dummy1 l "" +STARTLINE T " "}
 addUserKnob {68 selection M {None}}
 addUserKnob {22 BTsupFromList l INVISIBLE t "  remove from list  " -STARTLINE +INVISIBLE}
 addUserKnob {22 BTclear l "  clear list  " -STARTLINE T "import pickle\n\n##Variables\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nselection = thisNode\['selection']\n\n##Store group\npk = pickle.dumps(\[])\ncluster.setValue(pk)\n\n\n##Generate UI\nselection.setValues(\['None'])\nselection.setValue(0)\n"}
 addUserKnob {26 dummy2 l "" +STARTLINE T " "}
 addUserKnob {4 type M {}}
 addUserKnob {22 BTaddType l "  add by type  " -STARTLINE T "import pickle\n\n##Variables\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nmyType = thisNode\['type'].value().split('\\n')\[0]\nselection = thisNode\['selection']\n\nmyList = pickle.loads(cluster.value())\n\n\n##Get items\nroot.begin()\nNsel = nuke.allNodes( myType )\n\n\n##Create clean list\nfor n in Nsel:\n    myList.append(n.name())\n\nmyNewList = \[]\nfor elt in myList:\n   try:\n      ind = myNewList.index(elt)\n   except:\n      myNewList.append(elt)\nmyNewList = sorted(myNewList)\n\n\n##Store group\npk = pickle.dumps(myNewList)\ncluster.setValue(pk)\n\n##Store names\nselectionMenuList = \['None','All']\n\nallClasses= \[]\nallClassesFiltered = \[]\n\nfor n in myNewList:\n    N = nuke.toNode(n)\n    allClasses.append(N.Class())\n    elmt = N.Class() + '/' + n\n    selectionMenuList.append(elmt)\n\nfor elt in allClasses:\n   try:\n      ind = allClassesFiltered.index(elt)\n   except:\n      allClassesFiltered.append(elt)\nallClassesFiltered = sorted(allClassesFiltered)\n\nfor n in allClassesFiltered:\n    selectionMenuList.insert(allClassesFiltered.index(n)+2,n+'/All')\n\n\n##Generate UI\nselection.setValues(selectionMenuList)\n\nif selection.value() == 'None' :\n    selection.setValue(1)\n"}
 addUserKnob {22 BTremoveType l "  remove by type  " -STARTLINE T "import pickle\n\n##Variables\nroot = nuke.root()\nthisNode = nuke.thisNode()\nthisNode\['selection'].setValue(0)\ncluster = thisNode\['cluster']\nmyType = thisNode\['type'].value().split('\\n')\[0]\nselection = thisNode\['selection']\n\nmyList = pickle.loads(cluster.value())\n\n\n##Get items\nroot.begin()\nfor n in myList:\n    if nuke.toNode(n) == None:\n        myList.remove(n)\n    elif nuke.toNode(n).Class() == myType:\n        myList.remove(n)\n\n\n##Store group\npk = pickle.dumps(myList)\ncluster.setValue(pk)\n\n##Store names\nselectionMenuList = \['None','All']\n\nallClasses= \[]\nallClassesFiltered = \[]\n\nfor n in myList:\n    N = nuke.toNode(n)\n    allClasses.append(N.Class())\n    elmt = N.Class() + '/' + n\n    selectionMenuList.append(elmt)\n\nfor elt in allClasses:\n   try:\n      ind = allClassesFiltered.index(elt)\n   except:\n      allClassesFiltered.append(elt)\nallClassesFiltered = sorted(allClassesFiltered)\n\nfor n in allClassesFiltered:\n    selectionMenuList.insert(allClassesFiltered.index(n)+2,n+'/All')\n\n\n##Generate UI\nselection.setValues(selectionMenuList)\n\n"}
 addUserKnob {22 BTaddSelection l "  add selected nodes  " T "import pickle\n\n##Variables\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nmyType = thisNode\['type'].value().split('\\n')\[0]\nselection = thisNode\['selection']\n\nmyList = pickle.loads(cluster.value())\n\n\n##Get items\nroot.begin()\nNsel = nuke.selectedNodes()\n\n\n##Create clean list\nfor n in Nsel:\n    myList.append(n.name())\n\nmyNewList = \[]\nfor elt in myList:\n   try:\n      ind = myNewList.index(elt)\n   except:\n      myNewList.append(elt)\nmyNewList = sorted(myNewList)\n\n\n##Store group\npk = pickle.dumps(myNewList)\ncluster.setValue(pk)\n\n##Store names\nselectionMenuList = \['None','All']\n\nallClasses= \[]\nallClassesFiltered = \[]\n\nfor n in myNewList:\n    N = nuke.toNode(n)\n    allClasses.append(N.Class())\n    elmt = N.Class() + '/' + n\n    selectionMenuList.append(elmt)\n\nfor elt in allClasses:\n   try:\n      ind = allClassesFiltered.index(elt)\n   except:\n      allClassesFiltered.append(elt)\nallClassesFiltered = sorted(allClassesFiltered)\n\nfor n in allClassesFiltered:\n    selectionMenuList.insert(allClassesFiltered.index(n)+2,n+'/All')\n\n\n##Generate UI\nselection.setValues(selectionMenuList)\n\nif selection.value() == 'None' :\n    selection.setValue(1)" +STARTLINE}
 addUserKnob {22 BTremoveSelection l "  remove selected nodes  " t "\n" -STARTLINE T "import pickle\n\n##Variables\nroot = nuke.root()\nthisNode = nuke.thisNode()\nthisNode\['selection'].setValue(0)\ncluster = thisNode\['cluster']\nmyType = thisNode\['type'].value().split('\\n')\[0]\nselection = thisNode\['selection']\n\nmyList = pickle.loads(cluster.value())\n\n\n##Get items\nroot.begin()\nNsel = \[]\nfor n in nuke.selectedNodes():\n    Nsel.append(n.name())\n\nfor n in list(set(myList) & set(Nsel)):\n    myList.remove(n)\n\n\n\n##Store group\npk = pickle.dumps(myList)\ncluster.setValue(pk)\n\n##Store names\nselectionMenuList = \['None','All']\n\nallClasses= \[]\nallClassesFiltered = \[]\n\nfor n in myList:\n    N = nuke.toNode(n)\n    allClasses.append(N.Class())\n    elmt = N.Class() + '/' + n\n    selectionMenuList.append(elmt)\n\nfor elt in allClasses:\n   try:\n      ind = allClassesFiltered.index(elt)\n   except:\n      allClassesFiltered.append(elt)\nallClassesFiltered = sorted(allClassesFiltered)\n\nfor n in allClassesFiltered:\n    selectionMenuList.insert(allClassesFiltered.index(n)+2,n+'/All')\n\n\n##Generate UI\nselection.setValues(selectionMenuList)\n\n"}
 addUserKnob {1 cluster l INVISIBLE +INVISIBLE}
 cluster "(lp0\n."
 addUserKnob {20 AdvancedSettings}
 addUserKnob {43 classList l "class list"}
 addUserKnob {22 classListCleaner l "clean list" T "thisNode = nuke.thisNode()\n\nclassList= sorted(thisNode\['classList'].value().replace(' ','').split('\\n'))\nclassList.pop(0)\n\nfor n in classList:\n    if n == '':\n        classList.pop(classList.index(n))\n\nclassListClean = \[]\nfor elt in classList:\n   try:\n      ind = classListClean.index(elt)\n   except:\n      classListClean.append(elt)\n\nclassListMultiline = ''\nfor n in classListClean : \n    classListMultiline = classListMultiline + n + '\\n'\n\nthisNode\['classList'].setValue(classListMultiline)\n" +STARTLINE}
 addUserKnob {22 addClassFromSel l "   add class from selected nodes   " t "classList = nuke.thisNode()\['classList'].value()\nfor n in listSel:\n    classList= classList + '\\n' + n\n\nnuke.thisNode()\['classList'].setValue(classList)\n" -STARTLINE T "thisNode = nuke.thisNode()\nclassList = thisNode\['classList'].value()\n\nnuke.root().begin()\nNsel = nuke.selectedNodes()\nlistTmp = \[]\nlistSel = \[]\n\nfor n in Nsel :\n    listTmp.append(n.Class())\n\nfor elt in listTmp:\n   try:\n      ind = listSel.index(elt)\n   except:\n      listSel.append(elt)\n\n\nfor n in listSel:\n    classList= classList + n + '\\n'\n\nthisNode\['classList'].setValue(classList)"}
}
end_group
