Group {
 name fxT_disableNodes
 inputs 0
 help "Python tool to disable heavy nodes when working for a faster workflow.\n\nYou can also set a temporary value for the scanline-sample knobs.\n\nDeveloped by - Tor Andreassen - www.fxtor.net"
 knobChanged "def knobChangeDisable():\n\n  if nuke.thisKnob().name()=='disable':\n\n    n=nuke.thisNode()\n    dep = n.dependent(nuke.EXPRESSIONS)\n    disableVal = n\['disable'].value()\n\n    if disableVal == True:\n      n\['tile_color'].setValue(0xbf0f00ff)\n      for i in dep:\n        i\['tile_color'].setValue(0xbf0f00ff)\n\n    elif disableVal == False:\n      n\['tile_color'].setValue(0xf8ff00ff)\n      for i in dep:\n        i\['tile_color'].setValue(int(i\['tilecolor'].value()))\n\nknobChangeDisable()"
 tile_color 0xf8ff00ff
 label "\n_______"
 note_font Verdana
 note_font_size 13
 lock_connections true
 addUserKnob {20 fxT_disableNodesTAB l fxT_disableNodes}
 addUserKnob {26 NodeInfo l "" +STARTLINE T "<font color='grey'>\nThis is a tool for having the nuke-script run faster when working,<br />\nby temporarily disabling heavy nodes. Link the nodes together<br />\nand control them all throug this tool.<br /><br />\nYou can also set a temporary value for the scanline-sample knobs.<br />\nOr use it as a simple way of comparing before and after grades, etc.<br /><br />\n</font>\n<font color='red'>Remeber to enable before rendering</font>"}
 addUserKnob {26 ""}
 addUserKnob {20 DetailedHowToInfo l "Detailed HowTo Info" t "Unfold this group to read more info about how to use this tool." n 1}
 DetailedHowToInfo 0
 addUserKnob {26 ""}
 addUserKnob {26 Info l "" +STARTLINE T "<font color='grey'>\n1) Click the buttons to select the node types you want to affect.<br />\n<br />\n2) Click the 'Link Selected Nodes'-button,  to link selected nodes.<br />\n<br />\n3) Press 'd' on the keyboard with this node selected, to enable or disable the linked nodes.<br />\n<br />\n* If the nodes you wish to link is not listed as a button, you can manually select any nodes,<br />\nand click the 'Link Selected' button.<br />\n<br />\n* Link all nodes of a certain class by selecting any node<br />\nfollowed by clicking the 'Link Selected Class' button.<br />\n<br />\n* Unlink selected nodes, selected class or all nodes,<br />\nby clicking the red unlink buttons.<br />\n<br />\n5) Set temporary values on ScanlineRender sample values,<br />\nfrom the tab called 'Scanline Sample Controls'.<br />\n<br />\n</font>\n<font color='red'>IMPORTANT</font><br />\n<font color='grey'>\nDeleting the 'fxT_disableNodes' when nodes is still linked to it,<br />\nwill get you into throuble when rendering on a farm since there will be<br />\nexpressions linked to a nonexistent node.<br />\nBest practice is to click 'Unlink All' before you delete the node.<br />\n</font><br />\n\n<font color='red'>CALLBACKS</font><br />\n<font color='grey'>\nThis node has attached some nifty python callbacks, to change color<br />\nof the node and the linked nodes based on if it's disabled or not.<br />\nThis is done so that it's obvious in the node-graph if these nodes are disabled.<br />\n<br />\nCallbacks can in some cases make the nodes a bit laggy to move around<br />\nin the node graph. If you are experiencing this. Go to the Nuke Preferences<br />\nand turn off 'echo python commands to output window.<br />\n<br />\nIt can be found here: Nuke Menu > Preferences > Script editor<br />\n<br />\nUnless you need to see the output of all python commands,<br />\nit's always best to leave this checkbox turned off.<br />\n</font>"}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {22 RotoPaint t "Click this button to select all RotoPaint-nodes in your nuke script." T "def rotopaintSelection():\n\n\tmyself = nuke.thisNode().name()\n\tnuke.root().begin()\n\n\tnuke.toNode(myself).knob(\"selected\").setValue(False)\n\n\tfor node in nuke.allNodes():\n\t\tif node.Class() == 'RotoPaint':\n\t\t\tnode.setSelected(True)\n\nrotopaintSelection()" +STARTLINE}
 addUserKnob {22 pgBokeh -STARTLINE T "def pgbokehSelection():\n\n\tmyself = nuke.thisNode().name()\n\tnuke.root().begin()\n\n\tnuke.toNode(myself).knob(\"selected\").setValue(False)\n\n\tfor node in nuke.allNodes():\n\t\tif node.Class() == 'pgBokeh':\n\t\t\tnode.setSelected(True)\n\npgbokehSelection()"}
 addUserKnob {22 Median t "Click this button to select all Median-nodes in your nuke script." -STARTLINE T "def medianSelection():\n\n\tmyself = nuke.thisNode().name()\n\tnuke.root().begin()\n\n\tnuke.toNode(myself).knob(\"selected\").setValue(False)\n\n\tfor node in nuke.allNodes():\n\t\tif node.Class() == 'Median':\n\t\t\tnode.setSelected(True)\n\nmedianSelection()"}
 addUserKnob {22 MotionBlur t "Click this button to select all MotionBlur2D and MotionBlur3D-nodes in your nuke script." T "def mbSelection():\n\n\tmyself = nuke.thisNode().name()\n\tnuke.root().begin()\n\n\tnuke.toNode(myself).knob(\"selected\").setValue(False)\n\n\tfor node in nuke.allNodes():\n\t\tif (node.Class() == 'MotionBlur' or node.Class() == 'MotionBlur2D' or node.Class() == 'MotionBlur3D'):\n\t\t\tnode.setSelected(True)\n\nmbSelection()" +STARTLINE}
 addUserKnob {22 iDistort -STARTLINE T "def idistortSelection():\n\n\tmyself = nuke.thisNode().name()\n\tnuke.root().begin()\n\n\tnuke.toNode(myself).knob(\"selected\").setValue(False)\n\n\tfor node in nuke.allNodes():\n\t\tif node.Class() == 'IDistort':\n\t\t\tnode.setSelected(True)\n\nidistortSelection()"}
 addUserKnob {22 Particles t "Click this button to select all Particle-nodes in your nuke script.\n" -STARTLINE T "def particlesSelection():\n\n\tmyself = nuke.thisNode().name()\n\tnuke.root().begin()\n\n\tnuke.toNode(myself).knob(\"selected\").setValue(False)\n\n\tfor node in nuke.allNodes():\n\t\tparticleList = \['Particle']\n\t\tfor x in particleList:\n\t\t\tif x in node.Class():\n\t\t\t\tnode.setSelected(True)\n\nparticlesSelection()"}
 addUserKnob {22 resetSelection l "<font color='#55ce5b'>Reset Selections</font>" t "Click to reset selections" -STARTLINE T "def resetSelection():\n\n\tnuke.root().begin()\n\n\tfor each in nuke.allNodes(): \n\t\teach.knob(\"selected\").setValue(False)\n\nresetSelection()"}
 addUserKnob {26 ""}
 addUserKnob {22 linkSelected l "<font color='#55ce5b'>Link Selected</font>" t "Click this button to link all selected nodes." T "def linkSelected():\n    \n    me = nuke.thisNode()\n    myName = nuke.thisNode().name()\n\n    me\['selected'].setValue(False)\n\n    disableVal = me\['disable'].value()\n\n    for s in nuke.root().begin().selectedNodes():\n        try:\n\n            currCol = s\['tile_color'].value()\n            storeColor = nuke.String_Knob('tilecolor', 'tilecolor',str(currCol))\n\n            s\['disable'].setExpression('parent.' + myName +'.disable')\n\n            try:\n\n                for k in s.knobs():\n                    if k.startswith('tilecolor'):\n                        s.removeKnob(s\[k])\n                    else:\n                        pass\n\n                s.addKnob(storeColor)\n                s\['User'].setFlag(nuke.INVISIBLE)\n                s\['tilecolor'].setFlag(nuke.INVISIBLE)\n\n\n            except NameError:\n                pass\n\n\n            if (disableVal == False):\n                s\['tile_color'].setValue(int(currCol))\n\n            elif (disableVal == True):\n                s.knob(\"tile_color\").setValue(0xbf0f00ff)\n\n\n        except NameError:\n            pass\n\n    me\['disable'].clearAnimated()\n\nlinkSelected()" +STARTLINE}
 addUserKnob {22 linkSelectedClass l "<font color='#55ce5b'>Link Selected Class</font>" t "This will grab the last node you selected, and link all nodes of that nodetype. \n\nTo avoid accedently linking nodes you didn't mean to link, this wil only link one node class at the time, which will always be the node-class of the last selected node." -STARTLINE T "def linkSelectedClass():\n\n    me = nuke.thisNode()\n    myName = nuke.thisNode().name()\n    disableVal = me\['disable'].value()\n\n    me\['selected'].setValue(False)\n\n    nuke.root().begin()\n\n\n    lastSel = nuke.selectedNode()\n    lastName = nuke.selectedNode().name()\n    cl = lastSel.Class()\n\n    for each in nuke.allNodes(): \n        each.knob(\"selected\").setValue(False)\n\n    lastSel.knob(\"selected\").setValue(True)\n\n    for node in nuke.allNodes():\n        if node.Class() == cl:\n            node.setSelected(True)\n\n    for s in nuke.root().begin().selectedNodes():\n        try:\n            currCol = s\['tile_color'].value()\n            storeColor = nuke.String_Knob('tilecolor', 'tilecolor',str(currCol))\n\n            s\['disable'].setExpression('parent.' + myName +'.disable')\n\n            try:\n\n                for k in s.knobs():\n                    if k.startswith('tilecolor'):\n                        s.removeKnob(s\[k])\n                    else:\n                        pass\n\n                s.addKnob(storeColor)\n                s\['User'].setFlag(nuke.INVISIBLE)\n                s\['tilecolor'].setFlag(nuke.INVISIBLE)\n\n            except NameError:\n                pass\n\n\n            if (disableVal == False):\n                s\['tile_color'].setValue(int(currCol))\n\n            elif (disableVal == True):\n                s.knob(\"tile_color\").setValue(0xbf0f00ff)\n\n\n        except NameError:\n            s\['selected'].setValue(False)\n            pass\n\n\n\n    me\['disable'].clearAnimated()\n\nlinkSelectedClass()"}
 addUserKnob {22 unlinkSelected l "<font color='#f52300'>Unlink Selected</font>" t "Click this button to unlink all selected nodes." T "def unlinkSelected():\n\n  me = nuke.thisNode()\n  me\['selected'].setValue(False)\n\n  nuke.root().begin()\n\n  for i in nuke.selectedNodes():\n    try:\n      col = int(i\['tilecolor'].value())\n      i\['disable'].clearAnimated()\n      i\['disable'].setValue(False)\n      i\['tile_color'].setValue(col)\n      i.removeKnob(i\['tilecolor'])\n      i.removeKnob(i\['User'])\n      \n    except NameError:\n      pass\n\n  for each in nuke.allNodes():\n    each.knob(\"selected\").setValue(False)\n\nunlinkSelected()" +STARTLINE}
 addUserKnob {22 unlinkSelectedClass l "<font color='#f52300'>Unlink Selected Class</font>" t "Click this button to unlink all linked nodes of the selected class." -STARTLINE T "def unlinkSelectedClass():\n\n    me = nuke.thisNode()\n\n    nuke.root().begin()\n\n    lastSel = nuke.selectedNode()\n    cl = lastSel.Class()\n\n    for each in nuke.allNodes():\n        each.knob(\"selected\").setValue(False)\n\n    lastSel.knob(\"selected\").setValue(True)\n\n    for node in nuke.allNodes():\n        if node.Class() == cl:\n            node.setSelected(True)\n\n    try:\n        for i in nuke.selectedNodes():\n            col = int(i\['tilecolor'].value())\n            i\['disable'].clearAnimated()\n            i\['disable'].setValue(False)\n            i\['tile_color'].setValue(col)\n            i.removeKnob(i\['tilecolor'])\n            i.removeKnob(i\['User'])\n            \n    except NameError:\n        i\['selected'].setValue(False)\n        pass\n\n    for each in nuke.allNodes():\n        each.knob(\"selected\").setValue(False)\n\nunlinkSelectedClass()"}
 addUserKnob {22 unlinkAll l "<font color='#f52300'>Unlink All</font>" t "Click this button to unlink all linked nodes." -STARTLINE T "def unlinkAll():\n\n    me = nuke.thisNode()\n    me\['selected'].setValue(False)\n\n    nuke.root().begin()\n\n    dep = me.dependent(nuke.EXPRESSIONS)\n    for i in dep:\n        col = int(i\['tilecolor'].value())\n        i\['disable'].clearAnimated()\n        i\['disable'].setValue(False)\n        i\['tile_color'].setValue(col)\n        i.removeKnob(i\['tilecolor'])\n        i.removeKnob(i\['User'])\n\n    me\['disable'].setValue(False)\n    me.knob(\"tile_color\").setValue(0xf8ff00ff)\n\n    for each in nuke.allNodes(): \n        each.knob(\"selected\").setValue(False)\n\nunlinkAll()"}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "<font color=#454545>// fxT_disableNodes v2.3 © Tor Andreassent</font>"}
 addUserKnob {20 ScanlineRenderSamplesTAB l "Scanline Sample Controls"}
 addUserKnob {26 text l "" -STARTLINE T "Store/Reset Scanline Sample Values:"}
 addUserKnob {22 storeScanlineSampleValues l "Store Scanline Sample Values" t "Click this button to store all the current sample-values of all the ScanlineRender nodes." -STARTLINE T "def store_scanline_sample_values():\n\n    me = nuke.thisNode()\n    meName = nuke.thisNode().name()\n    nuke.root().begin()\n\n\n    if len(nuke.allNodes(\"ScanlineRender\")) != 0:\n\n        x = 0\n        for node in nuke.allNodes():\n            if node.Class() == 'ScanlineRender':\n                name = node.name()\n                custom_samples = \{\}\n\n                custom_samples\[name]=node\['samples'].value()\n                if (x>0):\n                    print(meName+': scanlineSamples was stored')\n\n                if not (me.knob(name+'_samples')):\n                    knob = nuke.String_Knob(str(name)+'_samples', str(name))\n                    me.addKnob(knob)\n                    knob.setValue(str(custom_samples\[name]))\n                    x = 1\n\n        if x == 0:\n            nuke.message(\"You have already stored a set of the original scanline sample values.\\n\\nIf you wish to store new values, please start over by clicking the 'Reset Scanline Sample Values' button.\")\n\n    else:\n        nuke.message(\"No ScanlineRender nodes found, this function is only designed to work with ScanlineRender nodes.\")\n\nstore_scanline_sample_values()"}
 addUserKnob {22 resetScanlineSampleValues l "Reset Scanline Sample Values" t "Click this button to remove all saved ScanlineRender-samle values.\n\nThis will also restore your Custom sample values to all your ScanlineRender nodes." -STARTLINE T "def resetScanlineSampleValues():\n\n    me = nuke.thisNode()\n    meName = nuke.thisNode().name()\n    knobs = me.knobs()\n\n    nuke.root().begin()\n\n    x = 0\n\n    for knobName in knobs:\n        if knobName.endswith('samples'):\n            myKnobName = knobs\[knobName].name()\n            myKnobVal = knobs\[knobName].value()\n\n            new = myKnobName\[:-8]\n\n            if nuke.exists(new):\n                nuke.toNode(new)\['samples'].setValue(float(myKnobVal))\n\n            me.removeKnob(me\[myKnobName])\n            \n            x = 1;\n\n    if (x>0):\n        print (meName+': Scanline Sample Values was reset.')\n\n    if x == 0:\n        nuke.message ('There is no stored Scanline Sample Values.\\n\\nNothing to reset.')\n\nresetScanlineSampleValues()"}
 addUserKnob {4 scanlineSampleType l "Choose Scanline Samples Type:   " t "This is the Scanline Sample Value type that is set in your Scanline nodes when you click the geeen 'Set Scanline-sample values' button.\n\nLow samples: This is the temporary value of 1.\nOriginal samples: This is the scanline-sample values that you have stored, same as the original values before you changed to low values" M {"Low samples" "Original samples"}}
 addUserKnob {22 setScanlineSampleType l "<font color ='light green'>Set Scanline Sample Type</font>" t "Set the sample values of all your ScanlineRender nodes.\n\nChoose from the dropdown list if you want to set low samples or if you want you set the  original stored samples." -STARTLINE T "def set_scanline_sample_type():\n\n    me = nuke.thisNode()\n    me_name = nuke.thisNode().name()\n\n    nuke.root().begin()\n\n    user_pick = nuke.toNode(me_name)\['scanlineSampleType'].value()\n\n    knobs = me.knobs()\n    x = 0\n\n    for knob_name in knobs:\n        if knob_name.endswith('samples'):\n            x = 1\n\n    if (x == 0):\n        nuke.message ('You have not stored any custom Scanline sample-values yet.\\n\\nPlease store these before you set any temporary scanline-sample values')\n\n    else:\n        print((\"\{name\}: Scanline Sample Values was set to: \{up\}\").format(name=me_name, up=user_pick))\n        for node in nuke.allNodes():\n            if node.Class() == 'ScanlineRender':\n                name = node.name()\n                xt = me\[name+'_samples'].value()\n\n                if user_pick == 'Original samples':\n                    node\['samples'].setValue(float(xt))\n                elif user_pick == 'Low samples':\n                    node\['samples'].setValue(1)\n\nset_scanline_sample_type()"}
 addUserKnob {26 ""}
 addUserKnob {20 HowToInfo2 l "How-To Info" n 1}
 addUserKnob {26 howToScanlineValues l "" +STARTLINE T "<font color='grey'>\n1) Click the 'Store Scanline Sample Values' button to store all the current<br />\n sample values from all your ScanlineRender nodes.<br />\n<br />\n2) Select what type of sample values you want to use in the dropdown list<br />\n(low samples is the temporary value of 1, original samples is your stored values).<br />\n<br />\n3) Click the 'Set Scanline Sample Type' button replaces the sample-value<br />\nin all the ScanlineRender nodes.<br />\n<br />\n4)Click the 'Reset Scanline Sample Values' button to start over.<br />\nThis will remove the stored values and restore all sample values<br />\nto the original stored values (so you never loose your original values)<br />\n</font>"}
 addUserKnob {20 endGroup_2 l endGroup n -1}
 addUserKnob {26 ""}
}
end_group
